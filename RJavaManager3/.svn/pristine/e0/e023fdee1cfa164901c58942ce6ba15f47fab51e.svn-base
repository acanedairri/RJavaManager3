EDF <- out1[rownames(out1)=="Residuals","Df"]
ESS <- out1[rownames(out1)=="Residuals","Sum Sq"]
EMS <- out1[rownames(out1)=="Residuals","Mean Sq"]
F.Hybrid <- HybridMS/HybridxEMS
P.Hybrid <- 1-pf(F.Hybrid, HybridDF, HybridxEDF)
F.HybridxE <- out1[rownames(out1)==envp1p2,"F value"]
P.HybridxE <- out1[rownames(out1)==envp1p2,"Pr(>F)"]
F.error <- NA
P.error <- NA
envblock <- paste(environment, ":", block,sep="")
repEnvDF <- out1[rownames(out1)==envblock,"Df"]
repEnvSS <- out1[rownames(out1)==envblock,"Sum Sq"]
repEnvMS <- out1[rownames(out1)==envblock,"Mean Sq"]
F.repEnv <- repEnvMS/EMS
P.repEnv <- 1-pf(F.repEnv, repEnvDF, EDF)
F.Env <- EnvMS/repEnvMS
P.Env <- 1-pf(F.Env, EnvDF, repEnvDF)
blockenv <- paste(block, "(", environment, ")",sep="")
SV <- c("SV",environment, blockenv, "Hybrid", "HybridxE", "Error")
DF <- format(rbind("Df",EnvDF,repEnvDF,HybridDF,HybridxEDF, EDF), justify="right")
SSq <- format(rbind("Sum Sq",format(round(rbind(EnvSS,repEnvSS,HybridSS,HybridxESS, ESS),digits=2))), justify="right")
MSq <- format(rbind("Mean Sq",format(round(rbind(EnvMS,repEnvMS,HybridMS,HybridxEMS, EMS),digits=2))), justify="right")
Fvalue <- format(round(rbind(F.Env, F.repEnv, F.Hybrid, F.HybridxE),digits=2))
Fvalue2 <- format(rbind("F value", Fvalue, " "), justify="right")
P.Env2<-formatC(as.numeric(format(P.Env,scientific=FALSE)),format="f")
P.repEnv2<-formatC(as.numeric(format(P.repEnv,scientific=FALSE)),format="f")
P.Hybrid2<-formatC(as.numeric(format(P.Hybrid,scientific=FALSE)),format="f")
P.HybridxE2<-formatC(as.numeric(format(P.HybridxE,scientific=FALSE)),format="f")
P <- format(rbind("Pr(>F)",P.Env2,P.repEnv2,P.Hybrid2,P.HybridxE2, " "), justify="right")
AOV <- noquote(cbind(SV,DF,SSq,MSq,Fvalue2,P))
colnames(AOV) <- c("", "", "", "", "", "")
rownames(AOV) <- rep("",nrow(AOV))
cat("\n\n\nANOVA TABLE")
print(AOV)
result[[z]]$anova.table <- AOV
i <- rep(1:p, each=p)
j <- rep(1:p,p)
IDparent1<-levels(temp.data[,match(p1, names(temp.data))])[i]
IDparent2<-levels(temp.data[,match(p1, names(temp.data))])[j]
ID <- cbind(i,j,IDparent1,IDparent2)
M2 <- subset(ID, i <= j)
t <- nrow(M2)
GCA <- as.matrix(rep(0,t*(p-1)),nrow=t, ncol=(p-1))
dim(GCA) <- c(t,p-1)
for (o in 1:t)
for (n in 1:(p-1))  {
GCA[o,n] <- (as.logical(M2[o,"i"]==n)-
as.logical(M2[o,"i"]==p))+
(as.logical(M2[o,"j"]==n)-
as.logical(M2[o,"j"]==p))  }
colnames(GCA) <- paste("GCA", 1:(p-1), sep="")
sca.col <- as.data.frame(subset(ID, (i<=(p-1) & (j >= i & j<=(p-1)))))
ncol <- nrow(sca.col)
SCA <- as.matrix(rep(0,t*ncol),nrow=t, ncol=ncol)
dim(SCA) <- c(t,ncol)
for (o in 1:t)
for (n in 1:ncol)  {
if (sca.col[n,"i"]==sca.col[n,"j"])  {
SCA[o,n] <- as.logical(M2[o,"i"]==sca.col[n,"i"])*
(as.logical(M2[o,"j"]==sca.col[n,"j"])-
as.logical(M2[o,"j"]==p)*2)+
as.logical(M2[o,"i"]==p)*
as.logical(M2[o,"j"]==p)
} else {
SCA[o,n] <- as.logical(M2[o,"i"]==sca.col[n,"i"])*
as.logical(M2[o,"j"]==sca.col[n,"j"])-
as.logical(M2[o,"j"]==p)*
(as.logical(M2[o,"i"]==sca.col[n,"i"])+
as.logical(M2[o,"i"]==sca.col[n,"j"])-
as.logical(M2[o,"i"]==p))    }
}
colnames(SCA) <- paste("SCA",sca.col$"i", sca.col$j, sep="")
esteffect <- as.data.frame(cbind(M2,GCA,SCA))
data.all <- merge(temp.data,esteffect, by.x=c(p1,p2), by.y=c("IDparent1","IDparent2"))
if (design == "RCB") {myformula2 <- paste(respvar[z], " ~ ", environment, " + ", block, ":", environment," + . - ", p1, " - ", p2, " - ", block, " + (. - ", p1, " - ", p2, " - ", block, "):",environment, sep = "") }
myformula
myformula2
myformula2<-"respvar ~ environment + block:environment + . - p1 - p2 - IDparent1 - IDparent2 - block + (. - p1 - p2 - IDparent1 - IDparent2 - block):environment"
model2 <- aov(formula(myformula2), data = data.all)
data.all
myformula2<-"respvar ~ environment + block:environment + . - p1 - p2 - i - j - block + (. - p1 - p2 - i - j - block):environment"
model2 <- aov(formula(myformula2), data = data.all)
out2 <- anova(model2)
out2
GCA.effect <- subset(out2, substr(rownames(out2),1,3)=="GCA")
GCA.df <- sum(GCA.effect$Df)
GCA.SS <- sum(GCA.effect$"Sum Sq")
GCA.MS <- GCA.SS/GCA.df
SCA.effect <- subset(out2, substr(rownames(out2),1,3)=="SCA")
SCA.df <- sum(SCA.effect$Df)
SCA.SS <- sum(SCA.effect$"Sum Sq")
SCA.MS <- SCA.SS/SCA.df
envgca <- paste(environment, ":GCA",sep="")
GCAxE.effect <- subset(out2, substr(rownames(out2),1,(nchar(environment)+4))==envgca)
GCAxE.df <- sum(GCAxE.effect$Df)
GCAxE.SS <- sum(GCAxE.effect$"Sum Sq")
GCAxE.MS <- GCAxE.SS/GCAxE.df
envsca <- paste(environment, ":SCA",sep="")
SCAxE.effect <- subset(out2, substr(rownames(out2),1,(nchar(environment)+4))==envsca)
SCAxE.df <- sum(SCAxE.effect$Df)
SCAxE.SS <- sum(SCAxE.effect$"Sum Sq")
SCAxE.MS <- SCAxE.SS/SCAxE.df
GCA.F <- GCA.MS/GCAxE.MS
SCA.F <- SCA.MS/SCAxE.MS
GCAxE.F <- GCAxE.MS/EMS
SCAxE.F <- SCAxE.MS/EMS
EF <- NA
GCA.P <- 1 - pf(GCA.F, GCA.df, GCAxE.df)
SCA.P <- 1 - pf(SCA.F, SCA.df, SCAxE.df)
GCAxE.P <- 1 - pf(GCAxE.F, GCAxE.df, EDF)
SCAxE.P <- 1 - pf(SCAxE.F, SCAxE.df, EDF)
EP <- NA
SV <- c("SV","GCA", "SCA", "GCAxE", "SCAxE", "Error")
DF <- format(rbind("Df",GCA.df, SCA.df, GCAxE.df, SCAxE.df, EDF),justify="right")
SSq <- format(rbind("Sum Sq",format(round(rbind(GCA.SS, SCA.SS, GCAxE.SS, SCAxE.SS, ESS),digits=2), nsmall=2)), justify="right")
MSq <- format(rbind("Mean Sq",format(round(rbind(GCA.MS, SCA.MS, GCAxE.MS, SCAxE.MS, EMS),digits=2), nsmall=2)), justify="right")
Fvalue <- format(rbind("F value",format(round(rbind(GCA.F, SCA.F, GCAxE.F, SCAxE.F),digits=2),nsmall=2)," "), justify="right")
GCA.p2<-formatC(as.numeric(format(GCA.P,scientific=FALSE)),format="f")
SCA.p2<-formatC(as.numeric(format(SCA.P,scientific=FALSE)),format="f")
GCAxE.p2<-formatC(as.numeric(format(GCAxE.P,scientific=FALSE)),format="f")
SCAxE.p2<-formatC(as.numeric(format(SCAxE.P,scientific=FALSE)),format="f")
P <- format(rbind("Pr(>F)",GCA.p2, SCA.p2, GCAxE.p2, SCAxE.p2, " "), justify="right")
AOV2 <- as.table(cbind (SV,DF,SSq,MSq,Fvalue,P))
colnames(AOV2) <- c("", "", "", "", "", "")
rownames(AOV2) <- rep("",nrow(AOV2))
cat("\n\nANOVA TABLE")
print(AOV2)
result[[z]]$anova2.table<- AOV2
library(doBy)
myformula4<- paste(respvar[z], " ~ ", p1," + ",p2, sep = "")
meandata <- summaryBy(formula(myformula4), data=temp.data)
# serial to parallel of meandata
mdata <- as.matrix(rep(0,p*p),nrow=p, ncol=p)
dim(mdata) <- c(p,p)
for (I in 1:p)  {
for (J in 1:p)   {
if (I <= J) mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I] & meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[J]),3]
}
}
colnames(mdata) <- rownames(mdata) <- levels(temp.data[,match(p1, names(temp.data))])
# before printing change 0 to blank
mdata2 <- format(round(mdata, 4),nsmall=4)
mdata3 <-noquote(format(gsub(" 0.0000", "", mdata2),justify="right"))
cat("\n\nMATRIX OF MEANS\n")
print(mdata3)
result[[z]]$means.matrix <- mdata3
mirror <- mdata
for (I in 1:p)  {
for (J in 1:p)   {
if (I > J) mirror[I,J] <- mirror[J,I]
}
}
XI <- rowSums(mirror)
minus <- c(0, rep(p))
plus <- c(0, rep(p))
for (I in 1:p) {
minus[I] <- XI[I] - mdata[I,I]
plus[I] <- XI[I] + mdata[I,I]
}
SUMX <- sum(mdata)
#----- Estimates of GCA Effects -----#
GCA.effect <- as.matrix(rep(0,p),nrow=1, ncol=p)
dim(GCA.effect) <- c(1,p)
for (I in 1:p)  {
GCA.effect[I] <- (1/(p+2))* (XI[I] + mdata[I,I] - (2/p)*SUMX)
}
colnames(GCA.effect) <- levels(temp.data[,match(p1, names(temp.data))])
rownames(GCA.effect) <- "GCA"
GCA.effect2 <-format(round(GCA.effect, 4), nsmall=4)
SCA.effect <- as.matrix(rep(0,p*p),nrow=p, ncol=p)
dim(SCA.effect) <- c(p,p)
for (I in 1:p)  {
for (J in 1:p)   {
#if (I <= J)   {
if (I < J) {
B1 <- mdata[I,J]
B2 <- (1/(p+2))* (plus[I] + plus[J])
B3 <- (2/((p+1)*(p+2)))*SUMX
SCA.effect[I,J] <- B1 - B2 + B3
}
}
}
colnames(SCA.effect) <- rownames(SCA.effect) <- levels(temp.data[,match(p1, names(temp.data))])
SCA.effect2 <-format(round(SCA.effect, 4), nsmall=4)
all.effect <- format(rbind(levels(temp.data[,match(p1, names(temp.data))]),SCA.effect2, GCA.effect2),justify="right")
all.effect2<-noquote(format(gsub(" 0.0000", "", all.effect),justify="right"))
colnames(all.effect2) <-rep("",ncol(all.effect2))
cat("\n\nGENERAL COMBINING ABILITY EFFECTS, SPECIFIC COMBINING ABILITY EFFECTS (above diagonal)\n")
print(all.effect2)
result[[z]]$gcasca.matrix <- all.effect2
MEPRIME <-EMS/r
Ve <- MEPRIME
SE_GI <- sqrt((p-1)*Ve/(e*p*(p+2)))
LSD_GI <- NA
SE_SIJ <- sqrt(p*(p-1)*Ve/(e*(p+1)*(p+2)))
LSD_SIJ <- NA
SE_SII <- sqrt(((p^2+p+2)*Ve)/(e*(p+1)*(p+2)))
LSD_SII <- NA
SE_Gdiff <- sqrt(2*Ve/(e*(p+2)))
LSD_Gdiff <- qt(.975,EDF)*SE_Gdiff
SE_SII_SJJ <- sqrt(2*(p-2)*MEPRIME/(e*(p+2)))
LSD_SII_SJJ <- qt(.975,EDF)*SE_SII_SJJ
SE_SIJ_SIK <- sqrt(2*(p+1)*Ve/(e*(p+2)))
LSD_SIJ_SIK <- qt(.975,EDF)*SE_SIJ_SIK
SE_SIJ_SKL <- sqrt(2*p*MEPRIME/(e*(p+2)))
LSD_SIJ_SKL <- qt(.975,EDF)*SE_SIJ_SKL
STDERR <- round(rbind(SE_GI,SE_SII, SE_SIJ, SE_Gdiff, SE_SII_SJJ, SE_SIJ_SIK, SE_SIJ_SKL), digits=4)
LSD <- round(rbind(LSD_GI,LSD_SII, LSD_SIJ, LSD_Gdiff, LSD_SII_SJJ, LSD_SIJ_SIK, LSD_SIJ_SKL), digits=4)
VAREST <- as.table(cbind(STDERR, LSD))
rownames(VAREST) <- c(' Gi', ' Sii', ' Sij', ' Gi-Gj', ' Sii-Sjj', ' Sij-Sik', ' Sij-Skl')
colnames(VAREST) <- c("Std. Error", "LSD")
cat("\n\nTABLE OF STANDARD ERRORS AND LSDs:\n")
print(VAREST)
result[[z]]$stderror.table<- VAREST
Vg <- (GCA.MS-GCAxE.MS-SCA.MS+SCAxE.MS)/(2*r*e*(p+2))
Vs <- (SCA.MS-SCAxE.MS)/(r*e)
Vge <- (GCAxE.MS-SCAxE.MS)/(r*(p+2))
Vse <- (SCAxE.MS-EMS)/r
VC <- round(rbind(Vg, Vs, Vge, Vse, EMS), digits=4)
colnames(VC) <- c("Estimate")
rownames(VC) <- c(" GCA", " SCA", " GCAxE", " SCAxE", " Error")
TABLE <- as.table(VC)
cat("\n\nESTIMATES OF VARIANCE COMPONENTS:\n")
print(TABLE)
result[[z]]$var.components<-TABLE
if (Vg<0) Vg <- 0
if (Vs<0) Vs <- 0
if (Vge<0) Vge <- 0
if (Vse<0) Vse <- 0
#---- Genetic Variance components ----#
VA <- (4/(1+F))*Vg
VD <- (4/(1+F)^2)*Vs
if (VD < 0) VD <- 0
VAE <- (4/(1+F))*Vge
VDE <- (4/(1+F)^2)*Vse
if (VDE < 0) VDE <- 0
VE <- EMS
VP <- VA + VD + VAE + VDE+ VE
h2B <- (VA + VD) / VP                 # individual based
h2N <- VA / VP              		  # individual based
Dominance.ratio <- sqrt(2*VD/VA)
Estimate <- round(rbind(VA, VD, VAE, VDE, h2N, h2B, Dominance.ratio), digits=4)
colnames(Estimate) <- c("Estimate")
rownames(Estimate) <- c(" VA", " VD", " VAE", " VDE", " h2-narrow sense", " H2-broad sense", " Dominance Ratio")
TABLE2 <- as.table(Estimate)
cat("\n\nESTIMATES OF GENETIC VARIANCE COMPONENTS:\n")
print(TABLE2)
result[[z]]$genvar.components<-TABLE2
cat("\n")
cat("\n==============================================================\n")
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M3_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel3Test("RCB", "dataRead", c("Plant_height","Grain_yield"), "P1", "P2", rep = NULL, block = "Block", cross = TRUE, individual = NULL, environment = "Env", alpha = 0.05), silent = TRUE)
result<-try(diallel3Test("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
result
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M3_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel3TestME("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
result
library(PBTools)
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel3TestME.R')
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel3TestME.R')
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M3_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel3TestME("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
result
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel3TestME.R')
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M3_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel3TestME("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M4_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel4Test("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
result
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel4Test.R')
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel4Test.R')
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M4_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel4Test("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
result
design = "RCB"
respvar=c("respvar")
p1="p1"
p2="p2"
rep = NULL
block = "block"
cross = TRUE
individual = NULL
environment = "environment"
alpha = 0.05
data<-dataRead
options(show.signif.stars=FALSE)
respvar <- trim.strings(respvar)
p1 <- trim.strings(p1)
p2 <- trim.strings(p2)
block <- trim.strings(block)
rep <- trim.strings(rep)
individual <- trim.strings(individual)
if (!is.null(environment)) {environment <-trim.strings(environment)}
alpha <- trim.strings(alpha)
if (cross) {parentsType<-"CROSS"
} else {parentsType<-"SELF"}
cat("\nDIALLEL ANALYSIS: GRIFFING METHOD IV IN ",design, " (", parentsType, ")\n", sep="")
if (!is.null(environment)) {
data[,match(environment, names(data))] <- factor(trim.strings(data[,match(environment, names(data))]))
envNumLevels<-nlevels(data[,match(environment, names(data))])
} else {envNumLevels<-1}
result <- list()
i=1
result[[i]] <- list()
cat("\n\nRESPONSE VARIABLE: ", respvar[i], "\n", sep="")
j=1
result[[i]]$site[[j]] <- list()
if (!is.null(environment)) {
crdVars<-c(respvar[i], p1, p2, rep, environment)
rcbVars<-c(respvar[i], p1, p2, block, environment)
} else {
crdVars<-c(respvar[i], p1, p2, rep)
rcbVars<-c(respvar[i], p1, p2, block)
}
if (design == "CRD") {temp.data <- data[sort(match(crdVars, names(data)))]}
if (design == "RCB") {temp.data <- data[sort(match(rcbVars, names(data)))]}
if (!is.null(environment)) {
cat("\n-----------------------------")
cat("\nANALYSIS FOR: ",environment, " = " ,levels(temp.data[,match(environment, names(temp.data))])[j],"\n", sep="")
cat("-----------------------------\n")
#temp.data <- subset(temp.data, temp.data[,match(environment, names(temp.data))] == levels(temp.data[,match(environment, names(temp.data))])[j])
temp.data <- temp.data[temp.data[,match(environment, names(temp.data))] == levels(temp.data[,match(environment, names(temp.data))])[j],]
temp.data[,match(environment, names(temp.data))] <- factor(trim.strings(temp.data[,match(environment, names(temp.data))]))
}
temp.data[,match(p1, names(temp.data))] <- factor(trim.strings(temp.data[,match(p1, names(temp.data))]))
temp.data[,match(p2, names(temp.data))] <- factor(trim.strings(temp.data[,match(p2, names(temp.data))]))
if (design == "CRD") {temp.data[,match(rep, names(temp.data))] <- factor(trim.strings(temp.data[,match(rep, names(temp.data))])) }
if (design == "RCB") {temp.data[,match(block, names(temp.data))] <- factor(trim.strings(temp.data[,match(block, names(temp.data))]))	}
# --- check if raw data is balanced. If not, generate estimates for missing values --- #
#temp.data <- subset(temp.data, subset = (is.na(temp.data[,match(respvar[i], names(temp.data))]) == FALSE))
temp.data <- temp.data[(is.na(temp.data[,match(respvar[i], names(temp.data))]) == FALSE),]
if (design == "CRD") {
tempDataForAnova<-temp.data[,c(p1, p2, rep, respvar[i])]
balancedData<-generateBalancedData(design="DIALLEL4", data=tempDataForAnova, respvar[i], p1, p2, rep)
}
if (design == "RCB") {
tempDataForAnova<-temp.data[,c(p1, p2, block, respvar[i])]
balancedData<-generateBalancedData(design="DIALLEL4", data=tempDataForAnova, respvar[i], p1, p2, block)
}
funcTrialSum <- class.information2(names(temp.data),temp.data)
cat("\nDATA SUMMARY: ","\n", sep="")
print(funcTrialSum)
cat("\nNumber of observations read: ",nrow(temp.data), sep="")
cat("\nNumber of missing observations: ",nrow(balancedData)-nrow(temp.data), sep="")
estimatedMissing <- FALSE
#cat("\n\n\nANOVA TABLE FOR THE EXPERIMENT\n")
if ((nrow(temp.data)/nrow(balancedData)) >= 0.90) {
if (nrow(temp.data) == nrow(balancedData)) {
anovaRemark <- "REMARK: Raw dataset is balanced."
dataForAnova<-tempDataForAnova
} else {
if (design == "CRD") {dataForAnova<-estimateMissingData(design="CRD", data=balancedData, respvar[i], p1, p2, rep)  }
if (design == "RCB") {dataForAnova<-estimateMissingData(design="RCB", data=balancedData, respvar[i], p1, p2, block)  }
anovaRemark <- "REMARK: Raw data and estimates of the missing values are used."
estimatedMissing <- TRUE
}
} else {anovaRemark <- "ERROR: Too many missing values. Cannot perform ANOVA for balanced data."
#cat("\n",anovaRemark)
}
pValue=0;
if (design == "CRD") {
myformula1 <- paste(respvar[i], " ~ ", p1,":",p2, sep = "")
model <- aov(formula(myformula1), data = temp.data)
anovatable<-summary(model)
# --- format anova table --- #
p<-formatC(as.numeric(format(anovatable[[1]][1,5], scientific=FALSE)), format="f")
anova_new<-cbind(round(anovatable[[1]][1:4],digits=2), rbind(p, " "))
anova_print<-replace(anova_new, is.na(anova_new), " ")
pValue <- anovatable[[1]]$"Pr(>F)"[[1]]
}
if (design == "RCB") {
myformula1 <- paste(respvar[i], " ~ ", block," + ", p1,":",p2, sep = "")
model <- aov(formula(myformula1), data = temp.data)
anovatable<-summary(model)
# --- format anova table --- #
pval1<-formatC(as.numeric(format(anovatable[[1]][1,5], scientific=FALSE)), format="f")
pval2<-formatC(as.numeric(format(anovatable[[1]][2,5], scientific=FALSE)), format="f")
anova_new<-cbind(round(anovatable[[1]][1:4],digits=2), rbind(pval1, pval2, " "))
anova_print<-replace(anova_new, is.na(anova_new), " ")
pValue <- anovatable[[1]]$"Pr(>F)"[[2]]
}
colnames(anova_print) <- c("Df", "Sum Sq", "Mean Sq", "F value", "Pr(>F)")
cat("\n\n\nANOVA TABLE FOR TESTING SIGNIFICANCE OF GENOTYPIC EFFECT \n", sep="")
cat(" Formula: ", myformula1,"\n\n")
print(anova_print)
result[[i]]$site[[j]]$genoEffect.anova  <-anova_print
out <- anova(model)
EMS <- out[rownames(out)=="Residuals","Mean Sq"]
EDF <- out[rownames(out)=="Residuals","Df"]
# --- mean data of diallel --- #
library(doBy)
myformula2<- paste(respvar[i], " ~ ", p1," + ",p2, sep = "")
meandata <- summaryBy(formula(myformula2), data=dataForAnova)
meandata
p <- (nlevels(temp.data[,match(p1, names(temp.data))])+1)
if (design == "CRD") {r <- nlevels(temp.data[,match(rep, names(temp.data))])}
if (design == "RCB") {r <- nlevels(temp.data[,match(block, names(temp.data))]) }
mdata <- as.matrix(rep(0,p*p),nrow=p, ncol=p)
dim(mdata) <- c(p,p)
I=1
J=1
p
meandata[(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I] & meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p2, names(temp.data))])[J]),3]
for (I in 1:p)  {
for (J in 1:p)   {
if (I < J) mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I] & meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p2, names(temp.data))])[J]),3]
}
}
for (J in 1:p)   {
if (I < J) mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I] & meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p2, names(temp.data))])[J]),3]
}
levels(temp.data[,match(p1, names(temp.data))])
levels(temp.data[,match(p2, names(temp.data))]
)
levels(meandata[,match(p2, names(meandata))]
)
meandata
for (I in 1:p)  {
for (J in 1:p)   {
mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I] & meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p2, names(temp.data))])[J]),3]
}
}
(meandata[,match(p1, names(meandata))]
)
I=1
(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I]
meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I]
J=2
meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p2, names(temp.data))])[J]
mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I] & meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p2, names(temp.data))])[J]),3]
mdata
J=3
mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I] & meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p2, names(temp.data))])[J]),3]
mdata
J=3
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M4_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel4Test("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
result
result<-try(diallel4Test("RCB", "dataRead", c("respvar"), "p2", "p1", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
result
meandata
p
for (I in 1:p)  {
for (J in 1:p)   {
if (I != J) mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==levels(temp.data[,match(p1, names(temp.data))])[I] & meandata[,match(p2, names(meandata))]==levels(temp.data[,match(p2, names(temp.data))])[J]),3]
}
}
unique(levels(temp.data[,match(p1, names(temp.data))]), levels(temp.data[,match(p2, names(temp.data))]))
levels(temp.data[,match(p2, names(temp.data))])
levels(temp.data[,match(p1, names(temp.data))])
unique(c(levels(temp.data[,match(p1, names(temp.data))]), levels(temp.data[,match(p2, names(temp.data))])))
allParents<-unique(c(levels(temp.data[,match(p1, names(temp.data))]), levels(temp.data[,match(p2, names(temp.data))])))
p<-length(allParents)
p
for (I in 1:p)  {
for (J in 1:p)   {
if (I < J) mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==allParents[I] & meandata[,match(p2, names(meandata))]==allParents[J]),3]
}
}
mdata
mdata <- as.matrix(rep(0,p*p),nrow=p, ncol=p)
dim(mdata) <- c(p,p)
for (I in 1:p)  {
for (J in 1:p)   {
if (I < J) mdata[I,J] <- meandata[(meandata[,match(p1, names(meandata))]==allParents[I] & meandata[,match(p2, names(meandata))]==allParents[J]),3]
}
}
mdata
colnames(mdata) <- rownames(mdata) <- allParents
# --- printing the matrix of means --- #
mdata2 <- format(round(mdata, 4),nsmall=4)
mdata3 <-noquote(format(gsub(" 0.0000", "", mdata2),justify="right"))
cat("\n\nMATRIX OF MEANS:\n")
print(mdata3)
result[[i]]$site[[j]]$means.matrix  <- mdata3
result
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel4Test.R')
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M4_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel4Test("RCB", "dataRead", c("respvar"), "p2", "p1", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
result
result<-try(diallel4Test("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel4Test.R')
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M4_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel4Test("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel4TestME.R')
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M4_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel4TestME("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
result
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel4TestME.R')
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M4_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel4TestME("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
source('E:/NSales/CreatingRPackage/PBTools Package/In package format/PBTools/R/diallel4TestME.R')
dataRead <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/Diallel_M4_letters.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
result<-try(diallel4TestME("RCB", "dataRead", c("respvar"), "p1", "p2", rep = NULL, block = "block", cross = TRUE, individual = NULL, environment = "environment", alpha = 0.05), silent = TRUE)
library(PBTools)
dataMeaTwoStage <- read.csv("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/summaryStats.csv", header = TRUE, na.strings = c("NA","."), blank.lines.skip=TRUE, sep = ",")
setwd("E:/NSales/juno workspace/workspace1/RJavaManager/sample_datasets/")
respvar=c("Plot.Yield_Mean")
geno="EntryNo"
env="Set"
method = "shukla"
data = dataMeaTwoStage
if (!is.na(match("package:lme4", search()))) { is.pkgload <- TRUE; detach("package:lme4")} else is.pkgload <- FALSE
library(nlme)
i=1
result[[i]] <- list()
result[[i]]$respvar <- respvar[i]
temp.data <- subset(data, select = c(geno, env, respvar[i]))
temp.data <- subset(temp.data, subset = (is.na(temp.data[,match(respvar[i], names(temp.data))]) == F))
command <- paste("gls(formula(", respvar[i]," ~ 1 + ",geno," + ", env,"), weights = varIdent(form = ~ 1 |", geno,"), data = temp.data)", sep = "")
model1 <- eval(parse(text = command))
int <- intervals(model1)
