# --------------------------------------------------------
# GraphBar: creates a barchart of the data
# ARGUMENTS:
# data - name of R dataframe
# outputPath - folder where graph(s) will be saved
# nVar - name of the numeric variable
# cVar - name of the categorical variable
# mTitle - main title for bar graph, if any
# yAxisLab - label to be used for the y-axis (for the numeric variable)
# xAxisLab - label to be used for x-axis (for the categorical variable)
# minValue - minimum value for the the Value Axis
# maxValue - maximum value for the Value Axis
# typeData - whether dataframe contains raw data or summary statistics
# descStat - whether the bars to be created will represent means, medians, sums,
#             or frequencies (if typeData is raw)
# barsHoriz - logical; whether bars are drawn horizontally or not
# barsClust - logical; whether bars from different response variables are clustered or not (stacked)
# barsPatterned - logical; whether bars are displayed with patterns (lines) or not
# byVar - name of categorical variable for which separate graphs are created
# errBars - logical; whether error bars are displayed or not
# typeErrBar - whether error bars displayed (if any) are based on:
# 					standard deviation, standard error, or confidence interval
# errMult - multiplier to be used on standard deviaton/standard error 
# confLev - confidence level, if confidence interval type error bars are to be displayed
# barColor - vector of rgb values for the color(s) of the bars (or names of colors)
# showLeg - logical; whether the graph legend is displayed or not
# legPos - position of the legend (if showLeg is TRUE)
# legTitle - text for the title of the legend, if displayed
# boxed - logical; whether a box is drawn around the plot or not
# multGraphs - logical; whether multiple graphs will be displayed in a page or not
# numRowsGraphs - number of rows of graphs to allow to be displayed
# numColsGraphs - number of columns of graphs to allow to be displayed
# orientGraphs - whether multiple graphs are to be displayed from left-to-right or top-to-bottom
# showVarNames - logical; whether names of the numerical variables will be displayed on the axis or not
# barLineAngle - vector of angle values for the lines inside the bars
# --------------------------------------------------------


GraphBar <- function(data, outputPath, nVar, cVar, mTitle = NULL, yAxisLab = NULL, 
								xAxisLab = NULL, minValue = NULL, maxValue = NULL, typeData = c("raw", "sumstat"), 
								descStat = c(NULL, "mean", "median", "sum", "freq"), barsHoriz = FALSE, 
								barsClust = TRUE, barsPatterned = FALSE, 
								byVar = NULL, errBars = FALSE, typeErrBar = c(NULL, "stdDev", "stdErr", "confInt"), 
								errMult = 1, confLev = NULL, barColor = NULL, 
								showLeg = FALSE, legPos = c("bottomright", "bottom", "bottomleft", "left", "topleft", "top", "topright", "right",
										"center"), legTitle = NULL, boxed = TRUE,
								multGraphs = FALSE, numRowsGraphs = 1, numColsGraphs = 1,
								orientGraphs = c("left-right", "top-bottom"),
								showVarNames = TRUE, barLineAngle = NULL) { 
	
	#reads data
	if (is.character(data)) { data <- eval(parse(text = data)) }
	
	#converts to factor the grouping variable(s)
	if (!is.null(cVar)) { data[,cVar] <- factor(data[,cVar]) }
	if (!is.null(byVar)) { data[,byVar] <- factor(data[,byVar]) }	
	
	if (!multGraphs) {
		numRowsGraphs = 1
		numColsGraphs = 1
	} 
	
	#determines number of cells allocated for graphs (esp. for multiple graphs)
 	numCells = numRowsGraphs * numColsGraphs
	
	#determines number of graphs to be created
	if (!is.null(byVar)) {
		numGraphs = (nlevels(data[,byVar]))
	} else numGraphs = 1

 	graphNum = 1
	#counts the number of files to save
	k = 1
	
	for (i in 1:numGraphs) {
		#creates device for saving graph(s)
		if (!multGraphs) {
			filename = paste(outputPath,"bargraph_",k,".png",sep="")
			png(file = filename)
			par(mfrow=c(numRowsGraphs, numColsGraphs))
			
		} else {
				if (graphNum == 1 || graphNum %% numCells == 1)	{
					filename = paste(outputPath,"bargraph_",k,".png",sep="")
					png(file = filename)
				
					if (orientGraphs == "top-bottom") {
						par(mfcol=c(numRowsGraphs, numColsGraphs))
					} else if (orientGraphs == "left-right") {
						par(mfrow=c(numRowsGraphs, numColsGraphs))
					}
				}
		}
		
		#creates data by subgroup, if a grouping variable is defined
		if (!is.null(byVar)) {
			tempData = data[which(data[,byVar] == levels(data[,byVar])[i]),]
			subTitle = paste(byVar,"=",levels(tempData[,byVar])[i], sep=" ")
		} else {
			tempData = data
			subTitle = NULL
		}

		# generates statistics
		allYStats = NULL
		yStatEB = NULL
		yStatEBj = NULL
		yStatLL = NULL
		yStatUL = NULL
		if (typeData == "raw") {
			if (!barsClust || (descStat != "mean")) errBars = FALSE
			for (j in 1:length(nVar)) {
				yStat = NULL
				if (descStat == "mean") {
					yStat = tapply(tempData[,nVar[j]], tempData[,cVar], mean, na.rm = TRUE)
					if (errBars) {
						ySum <- tapply((tempData[,nVar[j]]), tempData[,cVar], sum, na.rm = TRUE)
						yFreq <- ySum/yStat
						yStdDev <- tapply(tempData[,nVar[j]], tempData[,cVar], sd, na.rm = TRUE)
						yStdErr <- yStdDev / sqrt(yFreq) 
						
						if (typeErrBar == "stdDev") {
							lLimit = yStat - errMult * yStdDev
							uLimit = yStat + errMult * yStdDev
						} else if (typeErrBar == "stdErr") {
							lLimit = yStat - errMult * yStdErr
							uLimit = yStat + errMult * yStdErr
						} else if (typeErrBar == "confInt") {
							ycIHalfWid = qnorm((1+confLev)/2) * yStdErr
							lLimit = yStat - ycIHalfWid
							uLimit = yStat + ycIHalfWid
						}
						yStatLL = rbind(yStatLL, lLimit)
						yStatUL = rbind(yStatUL, uLimit)
					}
				} else if (descStat == "median") {
						yStat <- tapply(tempData[,nVar[j]], tempData[,cVar], median, na.rm = TRUE)
				} else if (descStat == "sum") {
						yStat <- tapply(tempData[,nVar[j]], tempData[,cVar], sum, na.rm = TRUE)
				} else if (descStat == "freq") {
						yMean = tapply(tempData[,nVar[j]], tempData[,cVar], mean, na.rm = TRUE)
						ySum <- tapply((tempData[,nVar[j]]), tempData[,cVar], sum, na.rm = TRUE)
						yStat <- ySum/yMean
				}
				allYStats = rbind(allYStats, yStat)
			}
		} else if (typeData == "sumStat") {
				tempData = tempData[order(data[,cVar]),]
				allYStats = t(as.matrix(tempData[nVar]))
		}

		namesX = levels(tempData[,cVar])
		
		#sets limits for the numerical variable
		yMinLim = if(!is.null(minValue)) { minValue
			} else {
					if(!is.null(yStatLL)) min(0, allYStats, yStatLL) 
					else min(0, min(allYStats)) 
			}
		yMaxLim = if(!is.null(maxValue)) { maxValue
			} else {
					if (barsClust) {
						if (!is.null(yStatUL)) max(allYStats, yStatUL) 
						else max(allYStats) 
					} else {
							for (i in 1:ncol(allYStats)) maxVals[i] = sum(allYStats[,i])
							max(maxVals)
					}
			}
	
		d = NULL
		
		#defines density values to create patterned bars (esp. for multiple numeric variables)
		if (barsPatterned) { 
			lNVar = length(nVar)
			denom = (lNVar*(lNVar + 1))/2
			for (i in 1:lNVar) d[i] = 200*(i/denom)
		}
		
		legLab = NULL
		if (showLeg) legLab = nVar
		
		#sets limits for the axis of the numeric variable(s)
		if (barsHoriz) {
			xVarLim = c(yMinLim,yMaxLim)
			yVarLim = NULL
		} else {
			yVarLim = c(yMinLim,yMaxLim)
			xVarLim = NULL
		}

		barplot1 <- barplot(allYStats, ylab = yAxisLab, main = mTitle, 
			sub = subTitle, names.arg = namesX, horiz = barsHoriz, 
			beside = barsClust, col = barColor, xlim = xVarLim, ylim = yVarLim,
			density = 10, angle = barLineAngle, legend.text = legLab, 
			args.legend = list(x = legPos, title = legTitle))
		
		#draws a box around the plot
		if (boxed) box(lty = 1)
		
		#adds labels (the names of the numerical variables) to the categorical variable axis of the plot
		if (length(nVar) > 1 && barsClust && showVarNames) {
			if (barsHoriz) {
				mtext(side = 2, at = barplot1, text = rep(nVar, nlevels(tempData[,cVar])),
							line = 0, cex = .75)
			} else {
				mtext(side = 1, at = barplot1, text = rep(nVar, nlevels(tempData[,cVar])),
							line = 0, cex = .75, las = 1)
			}
		}										

		#adds a label for the x-axis of the plot, as defined by the user
		mtext(side = 1, text = xAxisLab, line = 2, cex = 0.85)
		
		#adds error bars to the plot - for barsClust = TRUE and descStat = "mean" only
		if (errBars) {
			lLimits = matrix(yStatLL,c(length(nVar),nlevels(tempData[,cVar])))
			uLimits = matrix(yStatUL,c(length(nVar),nlevels(tempData[,cVar])))
			arrows(barplot1, lLimits, barplot1, uLimits, angle = 90, code = 3, length = 0.1)
		}
		
		#increments file number
		if ((graphNum %% numCells == 0) || graphNum == numGraphs) {
			dev.off()
			k = k + 1
		}
		graphNum = graphNum + 1
	}
	
}