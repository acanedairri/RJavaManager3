package org.irri.breedingtool.rjava.manager;

import org.irri.breedingtool.rjava.manager.api.IRJavaPBToolsAnalysisManager;
import org.irri.breedingtool.rjava.utilities.InputTransform;
import org.rosuda.JRI.Rengine;

public class PBToolAnalysisManager implements IRJavaPBToolsAnalysisManager {

	private Rengine rEngine;
	private InputTransform inputTransform;
	
	public PBToolAnalysisManager(Rengine rEngine) {
		this.rEngine = rEngine;
		this.inputTransform= new InputTransform();
	}
	
	private void rEngineEnd(){
		String rm = "rm(list=ls(all=TRUE))";
		rEngine.eval(rm);
		rEngine.end();
	}

		
	@Override
	public void doNC1Test(String dataFileName, String outFileName, String design, String[] respvar, String female, String male, 
			String rep, String block, String row, String column, String inbred, String individual, String environment){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcNc1Test = null;
		if (design == "CRD") {
			if (environment == "NULL") {
				funcNc1Test = "result<-try(nc1Test(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" 
						+ male + "\", rep = NULL, block = NULL, row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc1Test = "result<-try(nc1Test(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" 
						+ male + "\", rep = NULL, block = NULL, row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		} 
		if (design == "RCB") {
			if (environment == "NULL") {
				funcNc1Test = "result<-try(nc1Test(\"RCB\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc1Test = "result<-try(nc1Test(\"RCB\", \"dataRead\", respvar =" + respvarVector + ", female =\"" + female + "\", male = \"" + male + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		}
		if (design == "Alpha") {
			if (environment == "NULL") {
				funcNc1Test = "result<-try(nc1Test(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc1Test = "result<-try(nc1Test(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		}
		if (design == "RowColumn") {
			if (environment == "NULL") {
				funcNc1Test = "result<-try(nc1Test(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", inbred = " + inbred + ", individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc1Test = "result<-try(nc1Test(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in nc1Test function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcNc1Test);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcNc1Test);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
	@Override
	public void doNC1METest(String dataFileName, String outFileName, String design, String[] respvar, String female, String male, 
			String rep, String block, String row, String column, String inbred, String individual, String environment){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcNc1TestME = null;
		if (design == "CRD") {
			funcNc1TestME = "result<-try(nc1TestME(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" 
						+ male + "\", rep = NULL, block = NULL, row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		} 
		if (design == "RCB") {
			funcNc1TestME = "result<-try(nc1TestME(\"RCB\", \"dataRead\", respvar =" + respvarVector + ", female =\"" + female + "\", male = \"" + male + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		}
		if (design == "Alpha") {
			funcNc1TestME = "result<-try(nc1TestME(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		}
		if (design == "RowColumn") {
			funcNc1TestME = "result<-try(nc1TestME(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in nc1TestME function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";
	
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcNc1TestME);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcNc1TestME);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
		
	@Override
	public void doNC2Test(String dataFileName, String outFileName, String design, String[] respvar, String female, String male, 
			String rep, String block, String row, String column, String inbred, String individual, String environment){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcNc2Test = null;
		if (design == "CRD") {
			if (environment == "NULL") {
				funcNc2Test = "result<-try(nc2Test(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc2Test = "result<-try(nc2Test(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		} 
		if (design == "RCB") {
			if (environment == "NULL") {
				funcNc2Test = "result<-try(nc2Test(\"RCB\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc2Test = "result<-try(nc2Test(\"RCB\", \"dataRead\", respvar =" + respvarVector + ", female =\"" + female + "\", male = \"" + male + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		}
		if (design == "Alpha") {
			if (environment == "NULL") {
				funcNc2Test = "result<-try(nc2Test(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc2Test = "result<-try(nc2Test(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		}
		if (design == "RowColumn") {
			if (environment == "NULL") {
				funcNc2Test = "result<-try(nc2Test(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", inbred = " + inbred + ", individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc2Test = "result<-try(nc2Test(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in nc2Test function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcNc2Test);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcNc2Test);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
	@Override
	public void doNC2METest(String dataFileName, String outFileName, String design, String[] respvar, String female, String male, 
			String rep, String block, String row, String column, String inbred, String individual, String environment){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcNc2TestME = null;
		if (design == "CRD") {
			funcNc2TestME = "result<-try(nc2TestME(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		} 
		if (design == "RCB") {
			funcNc2TestME = "result<-try(nc2TestME(\"RCB\", \"dataRead\", respvar =" + respvarVector + ", female =\"" + female + "\", male = \"" + male + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		}
		if (design == "Alpha") {
			funcNc2TestME = "result<-try(nc2TestME(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		}
		if (design == "RowColumn") {
			funcNc2TestME = "result<-try(nc2TestME(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", female = \"" + female + "\", male = \"" + male + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", inbred = " + inbred + ", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in nc2TestME function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";	
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcNc2TestME);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcNc2TestME);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
		
	@Override
	public void doNC3Test(String dataFileName, String outFileName, String design, String[] respvar, String tester, String f2lines, 
			String rep, String block, String row, String column, String inbred, String individual, String environment){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcNc3Test = null;
		if (design == "CRD") {
			if (environment == "NULL") {
				funcNc3Test = "result<-try(nc3Test(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc3Test = "result<-try(nc3Test(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		} 
		if (design == "RCB") {
			if (environment == "NULL") {
				funcNc3Test = "result<-try(nc3Test(\"RCB\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc3Test = "result<-try(nc3Test(\"RCB\", \"dataRead\", respvar =" + respvarVector + ", tester =\"" + tester + "\", f2lines = \"" + f2lines + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		}
		if (design == "Alpha") {
			if (environment == "NULL") {
				funcNc3Test = "result<-try(nc3Test(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc3Test = "result<-try(nc3Test(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		}
		if (design == "RowColumn") {
			if (environment == "NULL") {
				funcNc3Test = "result<-try(nc3Test(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", individual = NULL, environment = " + environment + "), silent = TRUE)";
			} else {
				funcNc3Test = "result<-try(nc3Test(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
			}
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in nc3Test function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcNc3Test);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcNc3Test);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
	@Override
	public void doNC3METest(String dataFileName, String outFileName, String design, String[] respvar, String tester, String f2lines, 
			String rep, String block, String row, String column, String individual, String environment){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcNc3TestME = null;
		if (design == "CRD") {
			funcNc3TestME = "result<-try(nc3TestME(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		} 
		if (design == "RCB") {
			funcNc3TestME = "result<-try(nc3TestME(\"RCB\", \"dataRead\", respvar =" + respvarVector + ", tester =\"" + tester + "\", f2lines = \"" + f2lines + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		}
		if (design == "Alpha") {
			funcNc3TestME = "result<-try(nc3TestME(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		}
		if (design == "RowColumn") {
			funcNc3TestME = "result<-try(nc3TestME(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", individual = NULL, environment = \"" + environment + "\"), silent = TRUE)";
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in nc3TestME function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";	
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcNc3TestME);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcNc3TestME);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
		
	@Override
	public void doTTCTest(String dataFileName, String outFileName, String design, String[] respvar, String tester, String f2lines, 
			String rep, String block, String row, String column, String individual, String environment, String codeP1, String codeP2, String codeF1, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcTtcTest = null;
		if (design == "CRD") {
			if (environment == "NULL") {
				funcTtcTest = "result<-try(ttcTest(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, individual = NULL, environment = " + environment + ", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcTtcTest = "result<-try(ttcTest(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		} 
		if (design == "RCB") {
			if (environment == "NULL") {
				funcTtcTest = "result<-try(ttcTest(\"RCB\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, individual = NULL, environment = " + environment + ", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcTtcTest = "result<-try(ttcTest(\"RCB\", \"dataRead\", respvar =" + respvarVector + ", tester =\"" + tester + "\", f2lines = \"" + f2lines + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		if (design == "Alpha") {
			if (environment == "NULL") {
				funcTtcTest = "result<-try(ttcTest(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, individual = NULL, environment = " + environment + ", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcTtcTest = "result<-try(ttcTest(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		if (design == "RowColumn") {
			if (environment == "NULL") {
				funcTtcTest = "result<-try(ttcTest(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", individual = NULL, environment = " + environment + ", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcTtcTest = "result<-try(ttcTest(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", individual = NULL, environment = \"" + environment + "\", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in ttcTest function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcTtcTest);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcTtcTest);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
	@Override
	public void doTTCMETest(String dataFileName, String outFileName, String design, String[] respvar, String tester, String f2lines, 
			String rep, String block, String row, String column, String individual, String environment, String codeP1, String codeP2, String codeF1, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcTtcTestME = null;
		if (design == "CRD") {
			funcTtcTestME = "result<-try(ttcTestME(\"CRD\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
		} 
		if (design == "RCB") {
			funcTtcTestME = "result<-try(ttcTestME(\"RCB\", \"dataRead\", respvar =" + respvarVector + ", tester =\"" + tester + "\", f2lines = \"" + f2lines + "\", rep = NULL, block = \"" 
						+ block + "\", row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		if (design == "Alpha") {
			funcTtcTestME = "result<-try(ttcTestME(\"Alpha\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, individual = NULL, environment = \"" + environment + "\", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		if (design == "RowColumn") {
			funcTtcTestME = "result<-try(ttcTestME(\"RowColumn\", \"dataRead\", respvar = " + respvarVector + ", tester = \"" + tester + "\", f2lines = \"" + f2lines + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", individual = NULL, environment = \"" + environment + "\", codeP1 = \"" + codeP1 + "\", codeP2 = \"" 
						+ codeP2 + "\", codeF1 = \"" + codeF1 + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in ttcTestME function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";	
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcTtcTestME);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcTtcTestME);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
		
	@Override
	public void doDiallel1Test(String dataFileName, String outFileName, String design, String[] respvar, String p1, String p2, 
			String rep, String block, String row, String column, String cross, String individual, String environment, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcDiallel1Test=null;
		if (design == "CRD") {
			if (environment == "NULL") {
				funcDiallel1Test = "result<-try(diallel1Test(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel1Test = "result<-try(diallel1Test(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		if (design == "RCB") {
			if (environment == "NULL") {
				funcDiallel1Test = "result<-try(diallel1Test(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel1Test = "result<-try(diallel1Test(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
			}
		}
		if (design == "Alpha") {
			if (environment == "NULL") {
				funcDiallel1Test = "result<-try(diallel1Test(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel1Test = "result<-try(diallel1Test(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
			}
		}
		if (design == "RowColumn") {
			if (environment == "NULL") {
				funcDiallel1Test = "result<-try(diallel1Test(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel1Test = "result<-try(diallel1Test(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in diallel1Test function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";	
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcDiallel1Test);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcDiallel1Test);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
	@Override
	public void doDiallel1METest(String dataFileName, String outFileName, String design, String[] respvar, String p1, String p2, 
			String rep, String block, String row, String column, String cross, String individual, String environment, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String funcDiallel1TestME=null;
		if (design == "CRD") {
			funcDiallel1TestME = "result<-try(diallel1TestME(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		if (design == "RCB") {
			funcDiallel1TestME = "result<-try(diallel1TestME(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
		}
		if (design == "Alpha") {
			funcDiallel1TestME = "result<-try(diallel1TestME(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
		}
		if (design == "RowColumn") {
			funcDiallel1TestME = "result<-try(diallel1TestME(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in diallel1TestME function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";		
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcDiallel1TestME);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(funcDiallel1TestME);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
		
	@Override
	public void doDiallel2Test(String dataFileName, String outFileName, String design, String[] respvar, String p1, String p2, 
			String rep, String block, String row, String column, String cross, String individual, String environment, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcDiallel2Test=null;
		if (design == "CRD") {
			if (environment == "NULL") {
				funcDiallel2Test = "result<-try(diallel2Test(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel2Test = "result<-try(diallel2Test(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		if (design == "RCB") {
			if (environment == "NULL") {
				funcDiallel2Test = "result<-try(diallel2Test(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel2Test = "result<-try(diallel2Test(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
			}
		}
		if (design == "Alpha") {
			if (environment == "NULL") {
				funcDiallel2Test = "result<-try(diallel2Test(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel2Test = "result<-try(diallel2Test(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
			}
		}
		if (design == "RowColumn") {
			if (environment == "NULL") {
				funcDiallel2Test = "result<-try(diallel2Test(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel2Test = "result<-try(diallel2Test(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in diallel2Test function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";	
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcDiallel2Test);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcDiallel2Test);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
	@Override
	public void doDiallel2METest(String dataFileName, String outFileName, String design, String[] respvar, String p1, String p2, 
			String rep, String block, String row, String column, String cross, String individual, String environment, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcDiallel2TestME=null;
		if (design == "CRD") {
			funcDiallel2TestME = "result<-try(diallel2TestME(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		if (design == "RCB") {
			funcDiallel2TestME = "result<-try(diallel2TestME(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
		}
		if (design == "Alpha") {
			funcDiallel2TestME = "result<-try(diallel2TestME(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
		}
		if (design == "RowColumn") {
			funcDiallel2TestME = "result<-try(diallel2TestME(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in diallel2TestME function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";		
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcDiallel2TestME);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcDiallel2TestME);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
		
	@Override
	public void doDiallel3Test(String dataFileName, String outFileName, String design, String[] respvar, String p1, String p2, 
			String rep, String block, String row, String column, String cross, String individual, String environment, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcDiallel3Test=null;
		if (design == "CRD") {
			if (environment == "NULL") {
				funcDiallel3Test = "result<-try(diallel3Test(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel3Test = "result<-try(diallel3Test(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		if (design == "RCB") {
			if (environment == "NULL") {
				funcDiallel3Test = "result<-try(diallel3Test(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel3Test = "result<-try(diallel3Test(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
			}
		}
		if (design == "Alpha") {
			if (environment == "NULL") {
				funcDiallel3Test = "result<-try(diallel3Test(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel3Test = "result<-try(diallel3Test(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
			}
		}
		if (design == "RowColumn") {
			if (environment == "NULL") {
				funcDiallel3Test = "result<-try(diallel3Test(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel3Test = "result<-try(diallel3Test(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in diallel3Test function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";	
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcDiallel3Test);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcDiallel3Test);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
	@Override
	public void doDiallel3METest(String dataFileName, String outFileName, String design, String[] respvar, String p1, String p2, 
			String rep, String block, String row, String column, String cross, String individual, String environment, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcDiallel3TestME=null;
		if (design == "CRD") {
			funcDiallel3TestME = "result<-try(diallel3TestME(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		if (design == "RCB") {
			funcDiallel3TestME = "result<-try(diallel3TestME(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
		}
		if (design == "Alpha") {
			funcDiallel3TestME = "result<-try(diallel3TestME(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
		}
		if (design == "RowColumn") {
			funcDiallel3TestME = "result<-try(diallel3TestME(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in diallel3TestME function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";		
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcDiallel3TestME);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcDiallel3TestME);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
		
	@Override
	public void doDiallel4Test(String dataFileName, String outFileName, String design, String[] respvar, String p1, String p2, 
			String rep, String block, String row, String column, String cross, String individual, String environment, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcDiallel4Test=null;
		if (design == "CRD") {
			if (environment == "NULL") {
				funcDiallel4Test = "result<-try(diallel4Test(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel4Test = "result<-try(diallel4Test(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		if (design == "RCB") {
			if (environment == "NULL") {
				funcDiallel4Test = "result<-try(diallel4Test(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel4Test = "result<-try(diallel4Test(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
			}
		}
		if (design == "Alpha") {
			if (environment == "NULL") {
				funcDiallel4Test = "result<-try(diallel4Test(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel4Test = "result<-try(diallel4Test(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
			}
		}
		if (design == "RowColumn") {
			if (environment == "NULL") {
				funcDiallel4Test = "result<-try(diallel4Test(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = " + environment + ", alpha = " + alpha + "), silent = TRUE)";
			} else {
				funcDiallel4Test = "result<-try(diallel4Test(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
			}
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in diallel4Test function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";	
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcDiallel4Test);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcDiallel4Test);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
	@Override
	public void doDiallel4METest(String dataFileName, String outFileName, String design, String[] respvar, String p1, String p2, 
			String rep, String block, String row, String column, String cross, String individual, String environment, String alpha){

		String respvarVector= inputTransform.createRVector(respvar);
		
		//defining the R statements
		String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
		String sinkIn = "sink(\"" + outFileName + "\")";
		
		String usedData = "cat(\"\nDATA FILE: " + dataFileName + "\n\")";
		
		String funcDiallel4TestME=null;
		if (design == "CRD") {
			funcDiallel4TestME = "result<-try(diallel4TestME(\"CRD\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + 
						"\", rep = NULL, block = NULL, row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		if (design == "RCB") {
			funcDiallel4TestME = "result<-try(diallel4TestME(\"RCB\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = NULL, " +
						"block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
		}
		if (design == "Alpha") {
			funcDiallel4TestME = "result<-try(diallel4TestME(\"Alpha\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = \"" + block + "\", row = NULL, column = NULL, cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";;
		}
		if (design == "RowColumn") {
			funcDiallel4TestME = "result<-try(diallel4TestME(\"RowColumn\", \"dataRead\", " + respvarVector + ", \"" + p1 + "\", \"" + p2 + "\", rep = \"" 
						+ rep + "\", block = NULL, row = \"" + row + "\", column = \"" + column + "\", cross = " + cross + ", individual = NULL, environment = \"" + environment + "\", alpha = " + alpha + "), silent = TRUE)";
		}
		
		String checkError = "if (class(result) == \"try-error\") {\n";
		checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
		checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
		checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
		checkError = checkError + "    cat(\"\n*** \nERROR in diallel4TestME function:\\n  \",msg, \"\n***\", sep = \"\")\n";
		checkError = checkError + "}";		
		String sinkOut = "sink()";
		
		System.out.println(readData);
		System.out.println(sinkIn);
		System.out.println(funcDiallel4TestME);
		System.out.println(checkError);
		System.out.println(sinkOut);
		
		//R statements passed on to the R engine
		rEngine.eval(readData);
		rEngine.eval(sinkIn);
		rEngine.eval(usedData);
		rEngine.eval(funcDiallel4TestME);
		rEngine.eval(checkError);
		rEngine.eval(sinkOut);
		rEngineEnd();
	}
	
	@Override
	public void doSingleEnvironmentAnalysis(String dataFileName, String outFileName, String resultFolderPath, int designIndex, String[] respvar, String environment, String[] environmentLevels,
			String genotype, String block, String rep, String row, String column, boolean descriptiveStat, boolean varianceComponents, 
			boolean boxplotRawData, boolean histogramRawData, boolean heatmapResiduals, String heatmapRow, String heatmapColumn, boolean diagnosticPlot, 
			boolean genotypeFixed, boolean performPairwise, String pairwiseAlpha, String[] genotypeLevels, String[] controlLevels, boolean compareControl, boolean performAllPairwise,
			boolean genotypeRandom, boolean excludeControls, boolean genoPhenoCorrelation) {
		
		String respvarVector= inputTransform.createRVector(respvar);
//		String genotypeLevelsVector= inputTransform.createRVector(genotypeLevels);
		String controlLevelsVector= inputTransform.createRVector(controlLevels);
		boolean runningFixedSuccess =true;
		boolean runningRandomSuccess =true;
		
		try {				
			String designUsed = new String();
			String design = new String();
			switch (designIndex) {
				case 0: {
					designUsed = "Randomized Complete Block (RCB)"; 
					design = "RCB"; 
					break;
				}
				case 1: {
					designUsed = "Augmented RCB"; 
					design = "AugRCB";
					break;
				}
				case 2: {
					designUsed = "Augmented Latin Square"; 
					design = "AugLS";
					break;
				}
				case 3: {
					designUsed = "Alpha-Lattice"; 
					design = "Alpha";
					break;
				}
				case 4: {
					designUsed = "Row-Column"; 
					design = "RowCol";
					break;
				}
				default: {
					designUsed = "Randomized Complete Block (RCB)"; 
					design = "RCB";
					break;
				}
			}
			
			String readData = "data <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
			System.out.println(readData);
			rEngine.eval(readData);
			String runSuccessData = rEngine.eval("data").asString();
			
			if (runSuccessData != null && runSuccessData.equals("notRun")) {	
				System.out.println("error");
				rEngine.eval("capture.output(cat(\"\n***Error reading data.***\n\"),file=\"" + outFileName + "\",append = FALSE)"); 
			}
			else {
				String setWd = "setwd(\"" + resultFolderPath + "\")";
				System.out.println(setWd);
				rEngine.eval(setWd);
			}
						
			String usedData = "capture.output(cat(\"\nDATA FILE: " + dataFileName + "\n\",file=\"" + outFileName + "\"))";
			String outFile = "capture.output(cat(\"\nSINGLE-ENVIRONMENT ANALYSIS\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String usedDesign = "capture.output(cat(\"\nDESIGN: " + designUsed + "\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String sep = "capture.output(cat(\"------------------------------\"),file=\"" + outFileName + "\",append = TRUE)";
			String sep2 = "capture.output(cat(\"==============================\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String outspace = "capture.output(cat(\"\n\"),file=\"" + outFileName + "\",append = TRUE)"; 
			
			rEngine.eval(usedData);
			rEngine.eval(outFile);
			rEngine.eval(usedDesign);
			
			// OUTPUT
			// Genotype Fixed
			if (genotypeFixed) {
				String funcSsaFixed = null;
				String groupVars = null;
				if (environment == "NULL") {
					if (designIndex == 0 || designIndex == 1){
						funcSsaFixed = "ssa1 <- try(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column=NULL, rep=NULL," + environment+ ", is.random = FALSE), silent = TRUE)";
						groupVars = "c(\"" + genotype + "\", \"" + block + "\")";
					} else if (designIndex == 2) {
						funcSsaFixed = "ssa1 <- try(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + row+ "\",\"" + column + "\", rep=NULL," + environment+ ", is.random = FALSE), silent = TRUE)";
						groupVars = "c(\"" + genotype + "\", \"" + row + "\", \"" + column + "\")";
					} else if (designIndex == 3) {
						funcSsaFixed = "ssa1 <- try(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column=NULL,\"" + rep + "\"," + environment+ ", is.random = FALSE), silent = TRUE)";
						groupVars = "c(\"" + genotype + "\", \"" + block + "\", \"" + rep + "\")";
					} else if (designIndex == 4) {
						funcSsaFixed = "ssa1 <- try(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + row+ "\",\"" + column + "\",\"" + rep + "\","+ environment + ", is.random = FALSE), silent = TRUE)";
						groupVars = "c(\"" + genotype + "\", \"" + rep + "\", \"" + row + "\", \"" + column + "\")";
					}
				} else {
					if (designIndex == 0 || designIndex == 1){
						funcSsaFixed = "ssa1 <- try(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column=NULL, rep=NULL,\"" + environment+ "\", is.random = FALSE), silent = TRUE)";
						groupVars = "c(\"" + genotype + "\", \"" + block + "\")";
					} else if (designIndex == 2) {
						funcSsaFixed = "ssa1 <- try(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + row+ "\",\"" + column + "\", rep=NULL,\"" + environment+ "\", is.random = FALSE), silent = TRUE)";
						groupVars = "c(\"" + genotype + "\", \"" + row + "\", \"" + column + "\")";
					} else if (designIndex == 3) {
						funcSsaFixed = "ssa1 <- try(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column=NULL,\"" + rep + "\",\"" + environment+ "\", is.random = FALSE), silent = TRUE)";
						groupVars = "c(\"" + genotype + "\", \"" + block + "\", \"" + rep + "\")";
					} else if (designIndex == 4) {
						funcSsaFixed = "ssa1 <- try(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + row+ "\",\"" + column + "\",\"" + rep + "\",\""+ environment + "\", is.random = FALSE), silent = TRUE)";
						groupVars = "c(\"" + genotype + "\", \"" + rep + "\", \"" + row + "\", \"" + column + "\")";
					}
				}
				String fixedHead = "capture.output(cat(\"GENOTYPE AS: Fixed\n\"),file=\""+ outFileName + "\",append = TRUE)";
				rEngine.eval(funcSsaFixed);
				rEngine.eval(sep2);
				rEngine.eval(fixedHead);
				rEngine.eval(sep2);
				rEngine.eval(outspace);
				
				System.out.println(funcSsaFixed);

				String runSuccess = rEngine.eval("class(ssa1)").asString();
				if (runSuccess != null && runSuccess.equals("try-error")) {	
					System.out.println("ssa.test: error");
					String checkError = "msg <- trim.strings(strsplit(ssa1, \":\")[[1]])";
					String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
					String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
					String checkError4 = "capture.output(cat(\"*** \nERROR in ssa.test function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(checkError);
					rEngine.eval(checkError2);
					rEngine.eval(checkError3);
					rEngine.eval(checkError4);
					
					runningFixedSuccess=false;

				}
				else {
					for (int k = 0; k < respvar.length; k++) {
						int i = k + 1; // 1-relative index;
						String respVarHead = "capture.output(cat(\"\nRESPONSE VARIABLE: " + respvar[k] + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(sep);
						rEngine.eval(respVarHead);
						rEngine.eval(sep);
						rEngine.eval(outspace);
						
						// optional output: descriptive statistics
						if (descriptiveStat) {
							String funcDesc = null;
							if (environment=="NULL") {
								funcDesc = "outDesc <- try(DescriptiveStatistics(data, \"" + respvar[k] + "\", " + environment + "), silent=TRUE)";
							} else {
								funcDesc = "outDesc <- try(DescriptiveStatistics(data, \"" + respvar[k] + "\", \"" + environment + "\"), silent=TRUE)";
							}
							System.out.println(funcDesc);
							rEngine.eval(funcDesc);
							
							String outDescStat = "capture.output(cat(\"DESCRIPTIVE STATISTICS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)"; 
							String outDescStat2 = "capture.output(outDesc,file=\"" + outFileName + "\",append = TRUE)";
							
	  						String runSuccessDescStat = rEngine.eval("class(outDesc)").asString();	
							if (runSuccessDescStat != null && runSuccessDescStat.equals("try-error")) {	
								System.out.println("desc stat: error");
								String checkError = "msg <- trim.strings(strsplit(outDesc, \":\")[[1]])";
								String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
								String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
								String checkError4 = "capture.output(cat(\"*** \nERROR in DescriptiveStatistics function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(checkError);
								rEngine.eval(checkError2);
								rEngine.eval(checkError3);
								rEngine.eval(checkError4);
							} 
							else {
								rEngine.eval(outspace);
								rEngine.eval(outDescStat);
								rEngine.eval(outDescStat2);
								rEngine.eval(outspace);
							}
						}
						int envLevelsLength=0;
						if (environment == "NULL") {
							envLevelsLength = 1;
						} else {
							envLevelsLength = environmentLevels.length;
						}
						
						for (int m = 0; m < envLevelsLength; m++) { // no of envts or sites
							int j = m + 1; // 1-relative index;
							if (environment != "NULL") {
								String envtHead = "capture.output(cat(\"\nANALYSIS FOR: "+ environment + "\", \" = \" ,ssa1$output[[" + i	+ "]]$site[[" + j + "]]$env,\"\n\"),file=\""+ outFileName + "\",append = TRUE)";
								rEngine.eval(sep);
								rEngine.eval(envtHead);
								rEngine.eval(sep);
								rEngine.eval(outspace);
							}
								
							// default output: trial summary
							String funcTrialSum = "funcTrialSum <- try(class.information(" + groupVars + ",ssa1$output[[" + i + "]]$site[[" + j + "]]$data), silent=TRUE)";
							String trialSumHead = "capture.output(cat(\"\nDATA SUMMARY:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String trialObsRead = "capture.output(cat(\"Number of observations read: \", ssa1$output[["	+ i	+ "]]$site[[" + j + "]]$obsread[[1]],\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String trialObsUsed = "capture.output(cat(\"Number of observations used: \", ssa1$output[["	+ i	+ "]]$site[[" + j + "]]$obsused[[1]],\"\n\n\"),file=\""	+ outFileName + "\",append = TRUE)";
							String trialSum = "capture.output(funcTrialSum,file=\"" + outFileName + "\",append = TRUE)";

							rEngine.eval(funcTrialSum);
	
							String runSuccessTS = rEngine.eval("class(funcTrialSum)").asString();
							if (runSuccessTS != null && runSuccessTS.equals("try-error")) {	
								System.out.println("class info: error");
								String checkError = "msg <- trim.strings(strsplit(funcTrialSum, \":\")[[1]])";
								String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
								String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
								String checkError4 = "capture.output(cat(\"*** \nERROR in class.information function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(checkError);
								rEngine.eval(checkError2);
								rEngine.eval(checkError3);
								rEngine.eval(checkError4);
							}
							else {
								rEngine.eval(trialSumHead);
								rEngine.eval(trialObsRead);
								rEngine.eval(trialObsUsed);
								rEngine.eval(trialSum);
								rEngine.eval(outspace);
							}	
	
							// optional output: variance components
							if (varianceComponents) {
								String outVarComp = "capture.output(cat(\"\nVARIANCE COMPONENTS TABLE:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
								String outVarComp2 = "capture.output(ssa1$output[[" + i + "]]$site[[" + j + "]]$varcomp.table,file=\"" + outFileName + "\",append = TRUE)";
	
								rEngine.eval(outVarComp);
								rEngine.eval(outVarComp2);
								rEngine.eval(outspace);
							}
	
							//default output: test for genotypic effect
							String outAnovaTable1 = "capture.output(ssa1$output[[" + i + "]]$site[[" + j + "]]$model.comparison,file=\"" + outFileName + "\",append = TRUE)";
							String outAnovaTable2 = "library(lmerTest)";
							String outAnovaTable3 = "model1b <- lmer(formula(ssa1$output[[" + i + "]]$site[[" + j + "]]$formula1), data = ssa1$output[[" + i + "]]$site[[" + j + "]]$data, REML = T)";
							String outAnovaTable4 = "capture.output(anova(model1b),file=\"" + outFileName + "\",append = TRUE)";
							String outAnovaTable5 = "detach(\"package:lmerTest\")";
							
							rEngine.eval(outspace);
							rEngine.eval(outAnovaTable1);
							rEngine.eval(outAnovaTable2);
							rEngine.eval(outAnovaTable3);
							rEngine.eval(outspace);
							rEngine.eval(outAnovaTable4);
							rEngine.eval(outspace);
							rEngine.eval(outAnovaTable5);
	
							//default output: LSMeans
							String outDescStat = "capture.output(cat(\"\nGENOTYPE LSMEANS AND STANDARD ERRORS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outDescStat2 = "capture.output(ssa1$output[[" + i + "]]$site[[" + j + "]]$summary.statistic,file=\"" + outFileName + "\",append = TRUE)"; 
	
							rEngine.eval(outDescStat);
							rEngine.eval(outDescStat2);
							rEngine.eval(outspace);
							
							//if design is Alpha or Row-Column, display standard error of the differences
							if (designIndex==3 || designIndex==4) {
								String outsedTable = "capture.output(cat(\"\nSTATISTICS ON THE STANDARD ERROR OF THE MEAN DIFFERENCE (SED):\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
								String outsedTable2 = "capture.output(ssa1$output[[" + i + "]]$site[[" + j + "]]$sedTable,file=\"" + outFileName + "\",append = TRUE)";
	
								rEngine.eval(outsedTable);
								rEngine.eval(outsedTable2);
								rEngine.eval(outspace);
							}
							
							if (performPairwise) {
								
								double pairwiseSig = Double.valueOf(pairwiseAlpha);
								
//								rEngine.rniAssign("trmt.levels",	rEngine.rniPutStringArray(genotypeLevels),0); // a string array from OptionsPage
								
									if (compareControl) {
//										rEngine.rniAssign("controlLevels",rEngine.rniPutStringArray(controlLevels),0); // a string array from OptionsPage
																	
										String funcPwC = "pwControl <- try(ssa.pairwise(ssa1$output[[" + i + "]]$site[["	+ j	+ "]]$model, type = \"Dunnett\", alpha = "	+ pairwiseSig + ", control.level = " + controlLevelsVector + "), silent=TRUE)";
										String outCompareControl = "capture.output(cat(\"\nSIGNIFICANT PAIRWISE COMPARISONS (IF ANY): \nCompared with control(s)\n\n\"),file=\"" + outFileName	+ "\",append = TRUE)";
										String outCompareControl2n = "capture.output(pwControl$result,file=\""	+ outFileName	+ "\",append = TRUE)";
										String outCompareControl3n = "capture.output(cat(\"\n\n\"),file=\"" + outFileName	+ "\",append = TRUE)";
										System.out.println(funcPwC);
										rEngine.eval(funcPwC);
										rEngine.eval(outCompareControl);
										
										
				  						String runSuccessPwC = rEngine.eval("class(pwControl)").asString();	
										if (runSuccessPwC != null && runSuccessPwC.equals("try-error")) {	
											System.out.println("compare with control: error");
											String checkError = "msg <- trim.strings(strsplit(pwControl, \":\")[[1]])";
											String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
											String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
											String checkError4 = "capture.output(cat(\"*** \nERROR in ssa.pairwise function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
											rEngine.eval(checkError);
											rEngine.eval(checkError2);
											rEngine.eval(checkError3);
											rEngine.eval(checkError4);
										}
										else {
											
											rEngine.eval(outCompareControl2n);
											
											// display warning generated by checkTest in ssa.test
											String warningControlTest = rEngine.eval("pwControl$controlTestWarning").asString();
											
											if (!warningControlTest.equals("NONE")) {
												String warningCheckTest2 = "capture.output(cat(\"----- \nNOTE:\\n\"), file=\"" + outFileName + "\",append = TRUE)";
												String warningCheckTest3 = "capture.output(cat(\"" + warningControlTest + "\\n\"), file=\"" + outFileName + "\",append = TRUE)";
												
												rEngine.eval(warningCheckTest2);
												rEngine.eval(warningCheckTest3);
											}
											
											rEngine.eval(outCompareControl3n);
											
											System.out.println("pairwise control test:" + warningControlTest); 
											
										}
									} else if (performAllPairwise) {
										String outPerformAllPairwise = "capture.output(cat(\"\nSIGNIFICANT PAIRWISE COMPARISONS (IF ANY): \n\n\"),file=\""	+ outFileName	+ "\",append = TRUE)";
										rEngine.eval(outPerformAllPairwise);
										if (genotypeLevels.length > 0 && genotypeLevels.length < 16) {
											String funcPwAll = "pwAll <- try(ssa.pairwise(ssa1$output[[" + i + "]]$site[[" + j + "]]$model, type = \"Tukey\", alpha = "+ pairwiseSig + ", control.level = NULL), silent=TRUE)";
											String outPerformAllPairwise2 = "capture.output(pwAll$result,file=\"" + outFileName + "\",append = TRUE)";
											String outPerformAllPairwise3 = "capture.output(cat(\"\n\"),file=\""	+ outFileName	+ "\",append = TRUE)";
											rEngine.eval(funcPwAll);
//											System.out.println(funcPwAll);
	
											String runSuccessPwAll = rEngine.eval("class(pwAll)").asString();
											if (runSuccessPwAll != null && runSuccessPwAll.equals("try-error")) {	
												System.out.println("all pairwise: error");
												String checkError = "msg <- trim.strings(strsplit(pwAll, \":\")[[1]])";
												String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
												String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
												String checkError4 = "capture.output(cat(\"*** \nERROR in ssa.pairwise function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
												rEngine.eval(checkError);
												rEngine.eval(checkError2);
												rEngine.eval(checkError3);
												rEngine.eval(checkError4);
											}
											else {
												rEngine.eval(outPerformAllPairwise2);
												rEngine.eval(outPerformAllPairwise3);
											}
										} else {
											String nLevelsLarge = "capture.output(cat(\"***\nExceeded maximum number of genotypes that can be compared. \n***\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
											rEngine.eval(nLevelsLarge);
										}
									}
							}
						} // end of for loop for diff envts
					}

					//default output: save the means, standard error of the mean, variance and no. of reps in a file
					String meansFileName = "meansFileName <- paste(\"" + resultFolderPath + "\",\"summaryStats.csv\", sep=\"\")";
					String funcSaveSesVarRep=null;
					if (environment=="NULL") {
						funcSaveSesVarRep = "meansVar <- merge(ssa1$meansse,ssa1$varrep, by = \"EnvLevel\")";
					} else {
						funcSaveSesVarRep = "meansVar <- merge(ssa1$meansse,ssa1$varrep, by = \"" + environment + "\")";
					}
					String funcSaveSesVarRepCsv = "saveMeans <- try(write.table(meansVar,file = meansFileName ,sep=\",\",row.names=FALSE), silent=TRUE)";

					rEngine.eval(meansFileName);
					rEngine.eval(funcSaveSesVarRep);
					rEngine.eval(funcSaveSesVarRepCsv);
					
					String runSuccessSaveMeansSes = rEngine.eval("class(saveMeans)").asString();
					if (runSuccessSaveMeansSes != null && runSuccessSaveMeansSes.equals("try-error")) {	
						System.out.println("saving means file: error");
						String checkError = "msg <- trim.strings(strsplit(saveMeans, \":\")[[1]])";
						String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
						String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
						String checkError4 = "capture.output(cat(\"*** \nERROR in saving means file:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(checkError);
						rEngine.eval(checkError2);
						rEngine.eval(checkError3);
						rEngine.eval(checkError4);
					}
				
					//diagnostic plots for genotype fixed
					if (diagnosticPlot) {
						String diagPlotsFunc=null;
						if (environment=="NULL") {
							diagPlotsFunc = "diagPlots <- try(graph.sea.diagplots(data, " + respvarVector + ", env = " + environment + ", is.random = FALSE, ssa1), silent=TRUE)";
						} else {
							diagPlotsFunc = "diagPlots <- try(graph.sea.diagplots(data, " + respvarVector + ", env = \"" + environment + "\", is.random = FALSE, ssa1), silent=TRUE)";
						}
						System.out.println(diagPlotsFunc);
						rEngine.eval(diagPlotsFunc);
						
						String runSuccessDiagPlots = rEngine.eval("class(diagPlots)").asString();
						if (runSuccessDiagPlots != null && runSuccessDiagPlots.equals("try-error")) {	
							System.out.println("diagnostic plots(genotype fixed): error");
							String checkError = "msg <- trim.strings(strsplit(diagPlots, \":\")[[1]])";
							String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
							String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
							String checkError4 = "capture.output(cat(\"*** \nERROR in graph.sea.diagplots function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(checkError);
							rEngine.eval(checkError2);
							rEngine.eval(checkError3);
							rEngine.eval(checkError4);
						}
					}
					
					//generate heatmap
					if (heatmapResiduals) {
						String funcHeat=null;
						if (environment == "NULL") {
							funcHeat = "heat1 <- try(Heatmap(ssa1$residuals, data, \"fixed\", \"" + heatmapRow + "\", \"" + heatmapColumn + "\", " + respvarVector + ", \"" + designUsed + "\", " + environment + "), silent=TRUE)";
						} else {
							funcHeat = "heat1 <- try(Heatmap(ssa1$residuals, data, \"fixed\", \"" + heatmapRow + "\", \"" + heatmapColumn + "\", " + respvarVector + ", \"" + designUsed + "\", \"" + environment + "\"), silent=TRUE)";
						}
						System.out.println(funcHeat);
						rEngine.eval(funcHeat);
						
						String runSuccessHeat = rEngine.eval("class(heat1)").asString();
						if (runSuccessHeat != null && runSuccessHeat.equals("try-error")) {	
							System.out.println("heatmap: error");
							String checkError = "msg <- trim.strings(strsplit(heat1, \":\")[[1]])";
							String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
							String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
							String checkError4 = "capture.output(cat(\"*** \nERROR in Heatmap function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(checkError);
							rEngine.eval(checkError2);
							rEngine.eval(checkError3);
							rEngine.eval(checkError4);
						}
					}
				}  
			} // end of if fixed
				
  
			// Genotype Random
			if (genotypeRandom == true) {
				String funcSsaRandom = null;
				String groupVars = null;

				if (excludeControls) {
					if (environment == "NULL") {
						if (designIndex == 0){
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL," + environment + ", is.random = TRUE, excludeCheck=TRUE, checkList= " + controlLevelsVector + "), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\")";
						} else if (designIndex == 1){
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL," + environment + ", is.random = TRUE, excludeCheck=TRUE, checkList= NULL), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\")";
						} else if (designIndex == 2) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\", rep=NULL," + environment + ", is.random = TRUE, excludeCheck=TRUE, checkList= NULL), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + row + "\", \"" + column + "\")";
						} else if (designIndex == 3) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL,\"" + rep + "\"," + environment + ", is.random = TRUE, excludeCheck=TRUE, checkList= " + controlLevelsVector + "), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\", \"" + rep + "\")";
						} else if (designIndex == 4) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\",\"" + rep + "\"," + environment + ", is.random = TRUE, excludeCheck=TRUE, checkList= " + controlLevelsVector + "), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + rep + "\", \"" + row + "\", \"" + column + "\")";
						}
					} else {
						if (designIndex == 0){
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL,\"" + environment + "\", is.random = TRUE, excludeCheck=TRUE, checkList= " + controlLevelsVector + "), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\")";
						} else if (designIndex == 1) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL,\"" + environment + "\", is.random = TRUE, excludeCheck=TRUE, checkList= NULL), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\")";
						} else if (designIndex == 2) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\", rep=NULL,\"" + environment + "\", is.random = TRUE, excludeCheck=TRUE, checkList= NULL), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + row + "\", \"" + column + "\")";
						} else if (designIndex == 3) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL,\"" + rep + "\",\"" + environment + "\", is.random = TRUE, excludeCheck=TRUE, checkList= " + controlLevelsVector + "), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\", \"" + rep + "\")";
						} else if (designIndex == 4) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\",\"" + rep + "\",\"" + environment + "\", is.random = TRUE, excludeCheck=TRUE, checkList= " + controlLevelsVector + "), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + rep + "\", \"" + row + "\", \"" + column + "\")";
						}
					}
				} else {
					if (environment == "NULL") {
						if (designIndex == 0 || designIndex == 1) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL," + environment + ", is.random = TRUE), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\")";
						} else if (designIndex == 2) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\", rep=NULL," + environment + ", is.random = TRUE), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + row + "\", \"" + column + "\")";
						} else if (designIndex == 3) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL,\"" + rep + "\"," + environment + ", is.random = TRUE), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\", \"" + rep + "\")";
						} else if (designIndex == 4) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\",\"" + rep + "\"," + environment + ", is.random = TRUE), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + rep + "\", \"" + row + "\", \"" + column + "\")";
						}
					} else {
						if (designIndex == 0 || designIndex == 1) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL,\"" + environment + "\", is.random = TRUE), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\")";
						} else if (designIndex == 2) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\", rep=NULL,\"" + environment + "\", is.random = TRUE), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + row + "\", \"" + column + "\")";
						} else if (designIndex == 3) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL,\"" + rep + "\",\"" + environment + "\", is.random = TRUE), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + block + "\", \"" + rep + "\")";
						} else if (designIndex == 4) {
							funcSsaRandom = "ssa2 <- try(ssa.test(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\",\"" + rep + "\",\"" + environment + "\", is.random = TRUE), silent=TRUE)";
							groupVars = "c(\"" + genotype + "\", \"" + rep + "\", \"" + row + "\", \"" + column + "\")";
						}
					}
				}
				String randomHead = "capture.output(cat(\"GENOTYPE AS: Random\n\"),file=\"" + outFileName + "\",append = TRUE)";
				rEngine.eval(funcSsaRandom);
				rEngine.eval(sep2);
				rEngine.eval(randomHead);
				rEngine.eval(sep2);
				rEngine.eval(outspace);
				System.out.println(funcSsaRandom);
				
				String runSuccess2 = rEngine.eval("class(ssa2)").asString();	
				if (runSuccess2 != null && runSuccess2.equals("try-error")) {	
					System.out.println("ssa2: error");
					String checkError = "msg <- trim.strings(strsplit(ssa2, \":\")[[1]])";
					String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
					String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
					String checkError4 = "capture.output(cat(\"*** \nERROR in ssa.test function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(checkError);
					rEngine.eval(checkError2);
					rEngine.eval(checkError3);
					rEngine.eval(checkError4);
					
					runningRandomSuccess=false;
				}
				else {

				for (int k = 0; k < respvar.length; k++) {
					int i = k + 1; // 1-relative index;
					String respVarHead = "capture.output(cat(\"\nRESPONSE VARIABLE: " + respvar[k] + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(sep);
					rEngine.eval(respVarHead);
					rEngine.eval(sep);
					rEngine.eval(outspace);
					
					// optional output: descriptive statistics
					if (descriptiveStat) {
						String funcDesc = null;
						if (environment == "NULL") {
							funcDesc = "outDesc <- try(DescriptiveStatistics(data, \"" + respvar[k] + "\", " + environment + "), silent=TRUE)";
						} else {
							funcDesc = "outDesc <- try(DescriptiveStatistics(data, \"" + respvar[k] + "\", \"" + environment + "\"), silent=TRUE)";
						}
						rEngine.eval(funcDesc);
						System.out.println(funcDesc);
						String outDescStat = "capture.output(cat(\"DESCRIPTIVE STATISTICS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outDescStat2 = "capture.output(outDesc,file=\"" + outFileName + "\",append = TRUE)"; 

  						String runSuccessDescStat = rEngine.eval("class(outDesc)").asString();
						if (runSuccessDescStat != null && runSuccessDescStat.equals("try-error")) {	
							System.out.println("desc stat: error");
							String checkError = "msg <- trim.strings(strsplit(outDesc, \":\")[[1]])";
							String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
							String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
							String checkError4 = "capture.output(cat(\"*** \nERROR in DescriptiveStatistics function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(checkError);
							rEngine.eval(checkError2);
							rEngine.eval(checkError3);
							rEngine.eval(checkError4);
						} 
						else {
							rEngine.eval(outspace);
							rEngine.eval(outDescStat);
							rEngine.eval(outDescStat2);
							rEngine.eval(outspace);
						}	
					}
					int envLevelsLength2 = 0;
					if (environment == "NULL") {
						envLevelsLength2 = 1;
					} else {
						envLevelsLength2 = environmentLevels.length;
					}
					for (int m = 0; m < envLevelsLength2; m++) { // no of envts or sites
						int j = m + 1; // 1-relative index;
						
						if (environment != "NULL") {
							String envtHead = "capture.output(cat(\"\nANALYSIS FOR: "+ environment + "\", \" = \" ,ssa2$output[[" + i	+ "]]$site[[" + j + "]]$env,\"\n\"),file=\""+ outFileName + "\",append = TRUE)";
							rEngine.eval(sep);
							rEngine.eval(envtHead);
							rEngine.eval(sep);
							rEngine.eval(outspace);
						}
						
						// display warning generated by checkTest in ssa.test
						String warningCheckTest = rEngine.eval("ssa2$output[[" + i	+ "]]$site[[" + j + "]]$checkTestWarning").asString();
						
						if (!warningCheckTest.equals("NONE")) {
							String warningCheckTest2 = "capture.output(cat(\"\n*** \nWARNING:\\n\"), file=\"" + outFileName + "\",append = TRUE)";
							String warningCheckTest3 = "capture.output(cat(\"" + warningCheckTest + "\"), file=\"" + outFileName + "\",append = TRUE)";
							String warningCheckTest4 = "capture.output(cat(\"\n*** \\n\"), file=\"" + outFileName + "\",append = TRUE)";
							
							rEngine.eval(warningCheckTest2);
							rEngine.eval(warningCheckTest3);
							rEngine.eval(warningCheckTest4);
						} 
						System.out.println("check test:" + warningCheckTest);
						
						// default output: trial summary
						String funcTrialSum = "funcTrialSum <- try(class.information(" + groupVars + ",ssa2$output[[" + i + "]]$site[[" + j + "]]$data), silent=TRUE)";
						String trialSumHead = "capture.output(cat(\"\nDATA SUMMARY:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsRead = "capture.output(cat(\"Number of observations read: \", ssa2$output[["	+ i	+ "]]$site[[" + j + "]]$obsread[[1]],\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsUsed = "capture.output(cat(\"Number of observations used: \", ssa2$output[["	+ i	+ "]]$site[[" + j + "]]$obsused[[1]],\"\n\n\"),file=\""	+ outFileName + "\",append = TRUE)";
						String trialSum = "capture.output(funcTrialSum,file=\"" + outFileName + "\",append = TRUE)";

						rEngine.eval(funcTrialSum);

						String runSuccessTS = rEngine.eval("class(funcTrialSum)").asString();
						if (runSuccessTS != null && runSuccessTS.equals("try-error")) {	
							System.out.println("class info: error");
							String checkError = "msg <- trim.strings(strsplit(funcTrialSum, \":\")[[1]])";
							String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
							String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
							String checkError4 = "capture.output(cat(\"*** \nERROR in class.information function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(checkError);
							rEngine.eval(checkError2);
							rEngine.eval(checkError3);
							rEngine.eval(checkError4);
						}
						else {
							rEngine.eval(trialSumHead);
							rEngine.eval(trialObsRead);
							rEngine.eval(trialObsUsed);
							rEngine.eval(trialSum);
							rEngine.eval(outspace);
						}

						// optional output: variance components
						if (varianceComponents) {
							String outVarComp = "capture.output(cat(\"\nVARIANCE COMPONENTS TABLE:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outVarComp2 = "capture.output(ssa2$output[[" + i + "]]$site[[" + j + "]]$varcomp.table,file=\"" + outFileName + "\",append = TRUE)";

							rEngine.eval(outVarComp);
							rEngine.eval(outVarComp2);
							rEngine.eval(outspace);
						}
						
						//default output: test genotypic effect
						String outTestGen1 = "capture.output(cat(\"\nTESTING FOR THE SIGNIFICANCE OF GENOTYPIC VARIANCE USING -2 LOGLIKELIHOOD RATIO TEST:\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outTestGen2 = "capture.output(cat(\"\nFormula for Model1: \", ssa2$output[["	+ i	+ "]]$site[[" + j + "]]$formula1,\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outTestGen3 = "capture.output(cat(\"Formula for Model2: \", ssa2$output[["	+ i	+ "]]$site[[" + j + "]]$formula2,\"\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outTestGen4 = "capture.output(ssa2$output[[" + i + "]]$site[[" + j + "]]$models.table,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outTestGen1);
						rEngine.eval(outTestGen2);
						rEngine.eval(outTestGen3);
						rEngine.eval(outTestGen4);
						rEngine.eval(outspace);
						
						//default output: predicted means
						String outPredMeans = "capture.output(cat(\"\nPREDICTED MEANS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outPredMeans2 = "capture.output(ssa2$output[[" + i + "]]$site[[" + j + "]]$summary.statistic,file=\"" + outFileName + "\",append = TRUE)"; 
						rEngine.eval(outPredMeans);
						rEngine.eval(outPredMeans2);
						rEngine.eval(outspace);
						
						//default output: lsmeans of checks
						if (excludeControls) {
							int newCheckListLength = rEngine.eval("ssa2$output[[" + i	+ "]]$site[[" + j + "]]$newCheckListLength").asInt();
							
							if (newCheckListLength > 0) {
								String outLSMeansCheck = "capture.output(cat(\"\nCHECK/CONTROL LSMEANS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
								String outLSMeansCheck2 = "capture.output(ssa2$output[[" + i + "]]$site[[" + j + "]]$lsmeans.checks,file=\"" + outFileName + "\",append = TRUE)"; 
								rEngine.eval(outLSMeansCheck);
								rEngine.eval(outLSMeansCheck2);
								rEngine.eval(outspace);
							}
						}

						//default output: estimate heritability
						String outEstHerit = "capture.output(cat(\"\nHERITABILITY:\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outEstHerit2 = "capture.output(ssa2$output[[" + i + "]]$site[[" + j + "]]$heritability,file=\""	+ outFileName + "\",append = TRUE)";
						String outEstHerit3 = "capture.output(cat(\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outEstHerit);
						rEngine.eval(outEstHerit2);
						rEngine.eval(outEstHerit3);
						rEngine.eval(outspace);
						
					}
				}
				
				//optional output: estimate genotypic and phenotypic correlations
				if (genoPhenoCorrelation) {
					rEngine.eval(sep2);
					String funcEstCorr = null;
					if (excludeControls) {
						if (environment == "NULL") {
							if (designIndex == 0)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL," + environment + ", excludeLevels=TRUE, excludeList = " + controlLevelsVector + "), silent=TRUE)";
							else if (designIndex == 1)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL," + environment + ", excludeLevels=TRUE, excludeList = NULL), silent=TRUE)";
							else if (designIndex == 2)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\", rep=NULL," + environment + ", excludeLevels=TRUE, excludeList = NULL), silent=TRUE)";
							else if (designIndex == 3)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL,\"" + rep + "\"," + environment + ", excludeLevels=TRUE, excludeList = " + controlLevelsVector + "), silent=TRUE)";
							else if (designIndex == 4)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\",\"" + rep + "\"," + environment + ", excludeLevels=TRUE, excludeList = " + controlLevelsVector + "), silent=TRUE)";
						} else {
							if (designIndex == 0)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL,\"" + environment + "\", excludeLevels=TRUE, excludeList = " + controlLevelsVector + "), silent=TRUE)";
							else if (designIndex == 1)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL,\"" + environment + "\", excludeLevels=TRUE, excludeList = NULL), silent=TRUE)";
							else if (designIndex == 2)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\", rep=NULL,\"" + environment + "\", excludeLevels=TRUE, excludeList = NULL), silent=TRUE)";
							else if (designIndex == 3)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL,\"" + rep + "\",\"" + environment + "\", excludeLevels=TRUE, excludeList = " + controlLevelsVector + "), silent=TRUE)";
							else if (designIndex == 4)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\",\"" + rep + "\",\"" + environment + "\", excludeLevels=TRUE, excludeList = " + controlLevelsVector + "), silent=TRUE)";
						}
					} else {
						if (environment == "NULL") {
							if (designIndex == 0 || designIndex == 1)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL," + environment + "), silent=TRUE)";
							else if (designIndex == 2)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\", rep=NULL," + environment + "), silent=TRUE)";
							else if (designIndex == 3)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL,\"" + rep + "\"," + environment + "), silent=TRUE)";
							else if (designIndex == 4)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\",\"" + rep + "\"," + environment + "), silent=TRUE)";
						} else {
							if (designIndex == 0 || designIndex == 1)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL, rep=NULL,\"" + environment + "\"), silent=TRUE)";
							else if (designIndex == 2)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\", rep=NULL,\"" + environment + "\"), silent=TRUE)";
							else if (designIndex == 3)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + block + "\",column=NULL,\"" + rep + "\",\"" + environment + "\"), silent=TRUE)";
							else if (designIndex == 4)
								funcEstCorr = "gpcorr <- try(genoNpheno.corr(\"" + design + "\",data," + respvarVector + ",\"" + genotype + "\",\"" + row + "\",\"" + column + "\",\"" + rep + "\",\"" + environment + "\"), silent=TRUE)";
						}
					}

					System.out.println(funcEstCorr);
					rEngine.eval(funcEstCorr);	
					
					String runSuccessGPCorr = rEngine.eval("class(gpcorr)").asString();
					if (runSuccessGPCorr != null && runSuccessGPCorr.equals("try-error")) {	
						System.out.println("geno pheno corr: error");
						String checkError = "msg <- trim.strings(strsplit(gpcorr, \":\")[[1]])";
						String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
						String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
						String checkError4 = "capture.output(cat(\"*** \nERROR in genoNpheno.corr function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(checkError);
						rEngine.eval(checkError2);
						rEngine.eval(checkError3);
						rEngine.eval(checkError4);
					}
					else {
						String outEstGenoCorr = "capture.output(cat(\"\nGENOTYPIC CORRELATIONS:\n\"),file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outEstGenoCorr);
						
						int envLevelsLength = 0;
						if (environment == "NULL") {
							envLevelsLength = 1;
						} else {
							envLevelsLength = environmentLevels.length;
						}
					
						for (int m = 0; m < envLevelsLength; m++) { // no of envts or sites
							int j = m + 1; // 1-relative index;
							if (environment != "NULL") {
								String outEstGenoCorr2 = "capture.output(cat(\"\nSite: \", gpcorr$EnvLevels[[" + j + "]]),file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(outEstGenoCorr2);
							}
							String outEstGenoCorr2b = "capture.output(gpcorr$GenoCorr[[" + j + "]],file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(outspace);
							rEngine.eval(outEstGenoCorr2b);
							rEngine.eval(outspace);
						}
					
						String outEstPhenoCorr = "capture.output(cat(\"\nPHENOTYPIC CORRELATIONS:\n\"),file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outEstPhenoCorr);
						
						for (int m = 0; m < envLevelsLength; m++) { // no of envts or sites
							int j = m + 1; // 1-relative index;
							if (environment != "NULL") {
								String outEstPhenoCorr2 = "capture.output(cat(\"\nSite: \", gpcorr$EnvLevels[[" + j + "]]),file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(outEstPhenoCorr2);
							}
							String outEstPhenoCorr2b = "capture.output(gpcorr$PhenoCorr[[" + j + "]],file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(outspace);
							rEngine.eval(outEstPhenoCorr2b);
							rEngine.eval(outspace);
						}
					} //end of else for if runSuccessGPCorr	
				}
				
				//default option: save predicted means to a file
				String meansFileName2 = "meansFileName2 <- paste(\"" + resultFolderPath + "\",\"predictedMeans.csv\", sep=\"\")";
				String funcSavePredMeansCsv = "saveDataB1 <- try(write.table(ssa2$means,file = meansFileName2 ,sep=\",\",row.names=FALSE), silent=TRUE)";
				rEngine.eval(meansFileName2);
				rEngine.eval(funcSavePredMeansCsv);
				
				String runSuccessSavePredMeans = rEngine.eval("class(saveDataB1)").asString();
				if (runSuccessSavePredMeans != null && runSuccessSavePredMeans.equals("try-error")) {	
					System.out.println("save pred means: error");
					String checkError = "msg <- trim.strings(strsplit(saveDataB1, \":\")[[1]])";
					String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
					String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
					String checkError4 = "capture.output(cat(\"*** \nERROR in saving predicted means to a file:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(checkError);
					rEngine.eval(checkError2);
					rEngine.eval(checkError3);
					rEngine.eval(checkError4);
				}
				
				//optional output: diagnostic plots for genotype random
				if (diagnosticPlot) {
					String diagPlotsFunc = null;
					if (environment == "NULL") {
						diagPlotsFunc = "diagPlots <- try(graph.sea.diagplots(data, " + respvarVector + ", env = " + environment + ", is.random = TRUE, ssa2), silent=TRUE)";
					} else {
						diagPlotsFunc = "diagPlots <- try(graph.sea.diagplots(data, " + respvarVector + ", env = \"" + environment + "\", is.random = TRUE, ssa2), silent=TRUE)";
					}
					System.out.println(diagPlotsFunc);
					rEngine.eval(diagPlotsFunc);
					
					String runSuccessDiagPlots = rEngine.eval("class(diagPlots)").asString();
					if (runSuccessDiagPlots != null && runSuccessDiagPlots.equals("try-error")) {	
						System.out.println("diagnostic plots (genotype random): error");
						String checkError = "msg <- trim.strings(strsplit(diagPlots, \":\")[[1]])";
						String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
						String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
						String checkError4 = "capture.output(cat(\"*** \nERROR in graph.sea.diagplots function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(checkError);
						rEngine.eval(checkError2);
						rEngine.eval(checkError3);
						rEngine.eval(checkError4);
					}
				}

				//optional output: generate heatmap
				if (heatmapResiduals) {
					String funcHeat = null;
					if (environment == "NULL") {
						funcHeat = "heat2 <- try(Heatmap(ssa2$residuals, data, \"random\", \"" + heatmapRow + "\", \"" + heatmapColumn + "\", " + respvarVector + ", \"" + designUsed + "\", " + environment + "), silent=TRUE)";
					} else {
						funcHeat = "heat2 <- try(Heatmap(ssa2$residuals, data, \"random\", \"" + heatmapRow + "\", \"" + heatmapColumn + "\", " + respvarVector + ", \"" + designUsed + "\", \"" + environment + "\"), silent=TRUE)";
					}
					System.out.println(funcHeat);
					rEngine.eval(funcHeat);
					
					String runSuccessHeat2 = rEngine.eval("class(heat2)").asString();
					if (runSuccessHeat2 != null && runSuccessHeat2.equals("try-error")) {	
						System.out.println("heatmap: error");
						String checkError = "msg <- trim.strings(strsplit(heat2, \":\")[[1]])";
						String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
						String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
						String checkError4 = "capture.output(cat(\"*** \nERROR in Heatmap function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(checkError);
						rEngine.eval(checkError2);
						rEngine.eval(checkError3);
						rEngine.eval(checkError4);
					}
				}
				
//				if (SeaOptions.sConstructInt == true) {
////					graph.sea.predint <- function(data, respvar, env, result) 
//					String predIntPlotsSeaFunc = "predIntPlotsSea <- tryCatch(graph.sea.predint(data, " + respvarVector + ", env = \"" + environment + "\", geno = \"" + genotype + "\", ssa2), error=function(err) \"notRun\")";
//					System.out.println("predIntPlotsSeaFunc: " + predIntPlotsSeaFunc);
//					rEngine.eval(predIntPlotsSeaFunc);
//					
//					String runSuccesspredIntPlotsSea = rEngine.eval("predIntPlotsSea").asString();
//					System.out.println("runSuccesspredIntPlotsSea: " + runSuccesspredIntPlotsSea);
//					//generate warning if error occurred	
//					if (runSuccesspredIntPlotsSea != null && runSuccesspredIntPlotsSea.equals("notRun")) {	
//						System.out.println("error");
//						rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Prediction interval plots not created.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
//					}
////					else {
////					}
//				}
				
				} // end of else for if (runSuccess == "notRun") 
			} // end of if random

			//default output: save residuals to a file
			if (runningFixedSuccess & runningRandomSuccess) {
				String meansFileName3 = "meansFileName3 <- paste(\"" + resultFolderPath + "\",\"residuals.csv\", sep=\"\")";
				if ((genotypeFixed) & (genotypeRandom == false)) {
					String func1SaveResidualsCsv = "saveResid <- try(write.table(ssa1$residuals, file = meansFileName3 ,sep=\",\",row.names=FALSE), silent=TRUE)";
					rEngine.eval(meansFileName3);
					rEngine.eval(func1SaveResidualsCsv);
				}
				else if ((genotypeFixed == false) & (genotypeRandom)) {
					String func2SaveResidualsCsv = "saveResid <- try(write.table(ssa2$residuals, file = meansFileName3 ,sep=\",\",row.names=FALSE), silent=TRUE)";
					rEngine.eval(meansFileName3);
					rEngine.eval(func2SaveResidualsCsv);
				}
				else if ((genotypeFixed) & (genotypeRandom)) {
					String funcResidAll = "residAll <- merge(ssa1$residuals,ssa2$residuals.data,by=ssa1$byVars)";
				  	String funcSaveResidualsCsv = "saveResid <- try(write.table(residAll, file = meansFileName3 ,sep=\",\",row.names=FALSE), silent=TRUE)";
				  	rEngine.eval(meansFileName3);
				  	rEngine.eval(funcResidAll);
					rEngine.eval(funcSaveResidualsCsv);
				}
				String runSuccessSaveResid = rEngine.eval("class(saveResid)").asString();
				if (runSuccessSaveResid != null && runSuccessSaveResid.equals("try-error")) {	
					System.out.println("save residuals: error");
					String checkError = "msg <- trim.strings(strsplit(saveResid, \":\")[[1]])";
					String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
					String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
					String checkError4 = "capture.output(cat(\"*** \nERROR in saving residuals to a file:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(checkError);
					rEngine.eval(checkError2);
					rEngine.eval(checkError3);
					rEngine.eval(checkError4);
				}
			}
			
			//optional output: boxplot and histogram
			String withBox = "FALSE";
			if (boxplotRawData) withBox = "TRUE";
			String withHist = "FALSE";
			if (histogramRawData) withHist = "TRUE";
			String ssaOut = "ssa1";
			if (genotypeFixed) ssaOut = "ssa1";
			else if (genotypeRandom) ssaOut = "ssa2";

			String boxHistFunc = null;
			if (environment =="NULL") {
				boxHistFunc = "boxHist <- try(graph.sea.boxhist(data, " + respvarVector + ", env = " + environment + ", " + ssaOut + ", box = \"" + withBox + "\", hist = \"" + withHist + "\"), silent=TRUE)";
			} else {
				boxHistFunc = "boxHist <- try(graph.sea.boxhist(data, " + respvarVector + ", env = \"" + environment + "\", " + ssaOut + ", box = \"" + withBox + "\", hist = \"" + withHist + "\"), silent=TRUE)";
			}
			System.out.println(boxHistFunc);
			rEngine.eval(boxHistFunc);
			
			String runSuccessBoxHist = rEngine.eval("class(boxHist)").asString();
			if (runSuccessBoxHist != null && runSuccessBoxHist.equals("try-error")) {	
				System.out.println("boxplot/histogram: error");
				String checkError = "msg <- trim.strings(strsplit(boxHist, \":\")[[1]])";
				String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
				String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
				String checkError4 = "capture.output(cat(\"*** \nERROR in graph.sea.boxhist function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
				rEngine.eval(checkError);
				rEngine.eval(checkError2);
				rEngine.eval(checkError3);
				rEngine.eval(checkError4);
			}
			rEngine.eval(outspace);
			rEngine.eval(sep2);

			rEngineEnd();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void doMultiEnvironmentOneStage(String dataFileName, String outFileName, String resultFolderPath, int designIndex, String[] respvar, String environment, String[] environmentLevels,
			String genotype, String block, String rep, String row, String column, boolean descriptiveStat, boolean varianceComponents, boolean stabilityFinlay, boolean stabilityShukla, boolean ammi,
			boolean boxplotRawData, boolean histogramRawData, boolean diagnosticPlot, boolean genotypeFixed, boolean performPairwise, String pairwiseAlpha, String[] genotypeLevels, 
			String[] controlLevels, boolean compareControl, boolean performAllPairwise, boolean genotypeRandom) {
	
		String respvarVector= inputTransform.createRVector(respvar);
		String controlLevelsVector= inputTransform.createRVector(controlLevels);
		
		try {
			String designUsed = new String();
			String design = new String();
			switch (designIndex) {
				case 0: {
					designUsed = "Randomized Complete Block (RCB)"; 
					design = "RCB"; 
					break;
				}
				case 1: {
					designUsed = "Alpha-Lattice"; 
					design = "Alpha";
					break;
				}
				case 2: {
					designUsed = "Row-Column"; 
					design = "RowCol";
					break;
				}
				default: {
					designUsed = "Randomized Complete Block (RCB)"; 
					design = "RCB";
					break;
				}
			}
			
			String readData = "dataMeaOneStage <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
			System.out.println(readData);
			rEngine.eval(readData);
			String runSuccessData = rEngine.eval("dataMeaOneStage").asString();
			
			if (runSuccessData != null && runSuccessData.equals("notRun")) {	
				System.out.println("error");
				rEngine.eval("capture.output(cat(\"\n***Error reading data.***\n\"),file=\"" + outFileName + "\",append = FALSE)"); //append to output file?
			}
			else {
				String setWd = "setwd(\"" + resultFolderPath + "\")";
				System.out.println(setWd);
				rEngine.eval(setWd);
			}
			
			String usedData = "capture.output(cat(\"\nDATA FILE: " + dataFileName + "\n\",file=\"" + outFileName + "\"))";
			String outFile = "capture.output(cat(\"\nMULTI-ENVIRONMENT ANALYSIS (ONE-STAGE)\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String usedDesign = "capture.output(cat(\"\nDESIGN: " + designUsed + "\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String sep = "capture.output(cat(\"------------------------------\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String sep2 = "capture.output(cat(\"==============================\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String outSpace = "capture.output(cat(\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
			
			rEngine.eval(usedData);
			rEngine.eval(outFile);
			rEngine.eval(usedDesign);
						

			// OUTPUT
			// Genotype Fixed
			if (genotypeFixed) {
				String funcMeaOneStageFixed = null;
				String groupVars = null;
				if (design == "RCB") {
					funcMeaOneStageFixed = "meaOne1 <- try(GEOneStage.test(\"" + design + "\",dataMeaOneStage,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column = NULL, rep = NULL,\"" + environment + "\", is.genoRandom = FALSE), silent=TRUE)";
					groupVars = "c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\")";
				} else if (design == "Alpha") {
					funcMeaOneStageFixed = "meaOne1 <- try(GEOneStage.test(\"" + design + "\",dataMeaOneStage,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column = NULL,\"" + rep + "\",\"" + environment+ "\", is.genoRandom = FALSE), silent=TRUE)";
					groupVars = "c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\")";
				} else if (design == "RowCol") {
					funcMeaOneStageFixed = "meaOne1 <- try(GEOneStage.test(\"" + design + "\",dataMeaOneStage,"+ respvarVector + ",\"" + genotype + "\",\"" + row+ "\",\"" + column + "\",\"" + rep + "\",\""+ environment + "\", is.genoRandom = FALSE), silent=TRUE)";
					groupVars = "c(\"" + environment + "\", \"" + genotype + "\", \"" + rep + "\", \"" + row + "\", \"" + column + "\")";
				}	
				
				String fixedHead = "capture.output(cat(\"GENOTYPE AS: Fixed\n\"),file=\""+ outFileName + "\",append = TRUE)";
				rEngine.eval(funcMeaOneStageFixed);
				rEngine.eval(sep2);
				rEngine.eval(fixedHead);
				rEngine.eval(sep2);
				rEngine.eval(outSpace);
				
				System.out.println(funcMeaOneStageFixed);
				String runSuccess = rEngine.eval("class(meaOne1)").asString();
				if (runSuccess != null && runSuccess.equals("try-error")) {	
					System.out.println("GEOneStage.test: error");
					String checkError = "msg <- trim.strings(strsplit(meaOne1, \":\")[[1]])";
					String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
					String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
					String checkError4 = "capture.output(cat(\"*** \nERROR in GEOneStage.test function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(checkError);
					rEngine.eval(checkError2);
					rEngine.eval(checkError3);
					rEngine.eval(checkError4);

				} else {

					for (int k = 0; k < respvar.length; k++) {
						int i = k + 1; // 1-relative index;
						String respVarHead = "capture.output(cat(\"RESPONSE VARIABLE: " + respvar[k] + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(sep);
						rEngine.eval(respVarHead);
						rEngine.eval(sep);
							
						// default output: Trial Summary
						String funcTrialSum = "funcTrialSum <- try(class.information(" + groupVars + ",meaOne1$output[[" + i + "]]$data), silent=TRUE)";
						String trialSumHead = "capture.output(cat(\"\nDATA SUMMARY:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsRead = "capture.output(cat(\"Number of observations read: \", meaOne1$output[["	+ i	+ "]]$obsread[[1]],\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsUsed = "capture.output(cat(\"Number of observations used: \", meaOne1$output[["	+ i	+ "]]$obsused[[1]],\"\n\n\"),file=\""	+ outFileName + "\",append = TRUE)";
						String trialSum = "capture.output(funcTrialSum,file=\"" + outFileName + "\",append = TRUE)";
						
						rEngine.eval(funcTrialSum);
						
						String runSuccessTS = rEngine.eval("class(funcTrialSum)").asString();
						if (runSuccessTS != null && runSuccessTS.equals("try-error")) {	
							System.out.println("class info: error");
							String checkError = "msg <- trim.strings(strsplit(funcTrialSum, \":\")[[1]])";
							String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
							String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
							String checkError4 = "capture.output(cat(\"*** \nERROR in class.information function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(checkError);
							rEngine.eval(checkError2);
							rEngine.eval(checkError3);
							rEngine.eval(checkError4);
						}

						else {
							rEngine.eval(trialSumHead);
							rEngine.eval(trialObsRead);
							rEngine.eval(trialObsUsed);
							rEngine.eval(trialSum);
							rEngine.eval(outSpace);
						}	
	
						//optional output: descriptive statistics
						String funcDesc = "outDesc <- try(DescriptiveStatistics(dataMeaOneStage, \"" + respvar[k] + "\", grp = NULL), silent=TRUE)";
						rEngine.eval(funcDesc);
	
						if (descriptiveStat) {
							String outDescStat = "capture.output(cat(\"\nDESCRIPTIVE STATISTICS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outDescStat2 = "capture.output(outDesc,file=\"" + outFileName + "\",append = TRUE)"; 
	
							String runSuccessDescStat = rEngine.eval("class(outDesc)").asString();	
							if (runSuccessDescStat != null && runSuccessDescStat.equals("try-error")) {	
								System.out.println("desc stat: error");
								String checkError = "msg <- trim.strings(strsplit(outDesc, \":\")[[1]])";
								String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
								String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
								String checkError4 = "capture.output(cat(\"*** \nERROR in DescriptiveStatistics function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(checkError);
								rEngine.eval(checkError2);
								rEngine.eval(checkError3);
								rEngine.eval(checkError4);
							} 

							else {
								rEngine.eval(outDescStat);
								rEngine.eval(outDescStat2);
								rEngine.eval(outSpace);
							}
						}
	
						//optional output: Variance Components
						if (varianceComponents) {
							String outVarComp = "capture.output(cat(\"\nVARIANCE COMPONENTS TABLE:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outVarComp2 = "capture.output(meaOne1$output[[" + i + "]]$varcomp.table,file=\"" + outFileName + "\",append = TRUE)";
	
							rEngine.eval(outVarComp);
							rEngine.eval(outVarComp2);
							rEngine.eval(outSpace);
						}
						
						//default output: Test Genotypic Effect
						String outTestGen = "capture.output(meaOne1$output[[" + i + "]]$testsig.Geno,file=\"" + outFileName + "\",append = TRUE)";
						
						String outAnovaTable1 = "library(lmerTest)";
						String outAnovaTable2 = "model1b <- lmer(formula(meaOne1$output[[" + i + "]]$formula1), data = meaOne1$output[[" + i + "]]$data, REML = T)";
						String outAnovaTable3 = "capture.output(anova(model1b),file=\"" + outFileName + "\",append = TRUE)";
						String outAnovaTable4 = "detach(\"package:lmerTest\")";
						
						rEngine.eval(outSpace);
						rEngine.eval(outTestGen);
						rEngine.eval(outSpace);
						rEngine.eval(outAnovaTable1);
						rEngine.eval(outAnovaTable2);
						rEngine.eval(outAnovaTable3);
						rEngine.eval(outAnovaTable4);
						rEngine.eval(outSpace);
						
						//default output: Test Environment Effect
						String outTestEnv1 = "capture.output(cat(\"\nTESTING FOR THE SIGNIFICANCE OF ENVIRONMENT VARIANCE USING -2 LOGLIKELIHOOD RATIO TEST:\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outTestEnv2 = "capture.output(cat(\"\nFormula for Model1: \", meaOne1$output[[" + i + "]]$formula1,\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outTestEnv3 = "capture.output(cat(\"Formula for Model2: \", meaOne1$output[[" + i + "]]$formula3,\"\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outTestEnv4 = "capture.output(meaOne1$output[[" + i + "]]$testsig.Env,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outTestEnv1);
						rEngine.eval(outTestEnv2);
						rEngine.eval(outTestEnv3);
						rEngine.eval(outTestEnv4);
						rEngine.eval(outSpace);
						
						//default output: Test GXE Effect
						String outTestGenoEnv1 = "capture.output(cat(\"\nTESTING FOR THE SIGNIFICANCE OF GENOTYPE X ENVIRONMENT VARIANCE USING -2 LOGLIKELIHOOD RATIO TEST:\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outTestGenoEnv2 = "capture.output(cat(\"\nFormula for Model1: \", meaOne1$output[[" + i + "]]$formula1,\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outTestGenoEnv3 = "capture.output(cat(\"Formula for Model2: \", meaOne1$output[[" + i + "]]$formula4,\"\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outTestGenoEnv4 = "capture.output(meaOne1$output[[" + i + "]]$testsig.GenoEnv,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outTestGenoEnv1);
						rEngine.eval(outTestGenoEnv2);
						rEngine.eval(outTestGenoEnv3);
						rEngine.eval(outTestGenoEnv4);
						rEngine.eval(outSpace);
						
						//default output: Genotype x Environment Means
						String outGenoEnv = "capture.output(cat(\"\nGENOTYPE X ENVIRONMENT MEANS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outGenoEnv2 = "capture.output(meaOne1$output[[" + i + "]]$means.GenoEnv,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outGenoEnv);
						rEngine.eval(outGenoEnv2);
						rEngine.eval(outSpace);
												
						//default output: Genotype Means
						String outDescStat = "capture.output(cat(\"\nGENOTYPE LSMEANS AND STANDARD ERRORS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outDescStat2 = "capture.output(meaOne1$output[[" + i + "]]$means.Geno,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outDescStat);
						rEngine.eval(outDescStat2);
						rEngine.eval(outSpace);
											
						//optional output: PerformPairwise
						if (performPairwise) {
							double pairwiseSig = Double.valueOf(pairwiseAlpha);
							
//							rEngine.rniAssign("trmt.levels",	rEngine.rniPutStringArray(genotypeLevels),	0); // a string array from OptionsPage
							if (compareControl) {
//								rEngine.rniAssign("controlLevels",rEngine.rniPutStringArray(controlLevels),0); // a string array from OptionsPage
								
								String funcPwC = "pwControl <- try(ssa.pairwise(meaOne1$output[[" + i + "]]$model, type = \"Dunnett\", alpha = "	+ pairwiseSig + ", control.level = " + controlLevelsVector + "), silent=TRUE)";
								String outCompareControl = "capture.output(cat(\"\nSIGNIFICANT PAIRWISE COMPARISONS (IF ANY): \nCompared with control(s)\n\n\"),file=\"" + outFileName	+ "\",append = TRUE)";
								String outCompareControl2 = "capture.output(pwControl,file=\""	+ outFileName	+ "\",append = TRUE)";
								System.out.println(funcPwC);
								rEngine.eval(funcPwC);
								
								String runSuccessPwC = rEngine.eval("class(pwControl)").asString();	
								if (runSuccessPwC != null && runSuccessPwC.equals("try-error")) {	
									System.out.println("compare with control: error");
									String checkError = "msg <- trim.strings(strsplit(pwControl, \":\")[[1]])";
									String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
									String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
									String checkError4 = "capture.output(cat(\"*** \nERROR in ssa.pairwise function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
									rEngine.eval(checkError);
									rEngine.eval(checkError2);
									rEngine.eval(checkError3);
									rEngine.eval(checkError4);
									rEngine.eval(outSpace);
									rEngine.eval(outSpace);
								}
								else {
									rEngine.eval(outCompareControl);
									rEngine.eval(outCompareControl2);
									rEngine.eval(outSpace);
								}
							} else if (performAllPairwise) {
								String outPerformAllPairwise = "capture.output(cat(\"\nSIGNIFICANT PAIRWISE COMPARISONS (IF ANY): \n\n\"),file=\""	+ outFileName	+ "\",append = TRUE)";
								rEngine.eval(outPerformAllPairwise);
								if (genotypeLevels.length > 0	& genotypeLevels.length < 16) {
									String funcPwAll = "pwAll <- try(ssa.pairwise(meaOne1$output[[" + i + "]]$model, type = \"Tukey\", alpha = "+ pairwiseSig + ", control.level = NULL), silent=TRUE)";
									String outPerformAllPairwise2n = "capture.output(pwAll,file=\"" + outFileName + "\",append = TRUE)";
									rEngine.eval(funcPwAll);
									
									String runSuccessPwAll = rEngine.eval("class(pwAll)").asString();
									if (runSuccessPwAll != null && runSuccessPwAll.equals("try-error")) {	
										System.out.println("all pairwise: error");
										String checkError = "msg <- trim.strings(strsplit(pwAll, \":\")[[1]])";
										String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
										String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
										String checkError4 = "capture.output(cat(\"*** \nERROR in ssa.pairwise function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
										rEngine.eval(checkError);
										rEngine.eval(checkError2);
										rEngine.eval(checkError3);
										rEngine.eval(checkError4);
									}
									else {
										rEngine.eval(outPerformAllPairwise2n);
										rEngine.eval(outSpace);
										rEngine.eval(outSpace);
									}	
								} else {
									String nLevelsLarge = "capture.output(cat(\"***\nExceeded maximum number of genotypes that can be compared. \n***\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
									rEngine.eval(nLevelsLarge);
								}
							}
						}
						
						String genoEnvMeans = "genoEnvMeans <- meaOne1$output[[" + i + "]]$means.GenoEnv";
						rEngine.eval(genoEnvMeans);
						System.out.println(genoEnvMeans);
						
						String ybarName = respvar[k] + "_means";
						
						//optional output if selected and if the number of environment levels is at least 5: Stability Analysis using Regression
						if (stabilityFinlay) {
							if (environmentLevels.length > 4) {
								String funcStability1 = "funcStability1 <- try(stability.analysis(genoEnvMeans, \"" + ybarName + "\", \"" + genotype + "\", \"" + environment + "\", method = \"regression\"), silent=TRUE)";
								String outTestStability1 = "capture.output(cat(\"\nSTABILITY ANALYSIS USING FINLAY-WILKINSON MODEL:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
								String outTestStability1b = "capture.output(funcStability1[[1]][[1]]$stability,file=\"" + outFileName + "\",append = TRUE)";
														
								rEngine.eval(funcStability1);
								rEngine.eval(outTestStability1);
								System.out.println(funcStability1);
								
								String runSuccessStab = rEngine.eval("class(funcStability1)").asString();
								if (runSuccessStab != null && runSuccessStab.equals("try-error")) {	
									System.out.println("stability reg: error");
									String checkError = "msg <- trim.strings(strsplit(funcStability1, \":\")[[1]])";
									String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
									String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
									String checkError4 = "capture.output(cat(\"*** \nERROR in stability.analysis function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
									rEngine.eval(checkError);
									rEngine.eval(checkError2);
									rEngine.eval(checkError3);
									rEngine.eval(checkError4);
								}
								else {
									rEngine.eval(outTestStability1b);
									rEngine.eval(outSpace);
								}
							} else {
								String outRemark = "capture.output(cat(\"\nSTABILITY ANALYSIS USING FINLAY-WILKINSON MODEL:\n\"),file=\"" + outFileName + "\",append = TRUE)";
								String outRemark2 = "capture.output(cat(\"***This is not done. The environment factor should have at least five levels.***\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
								
								rEngine.eval(outRemark);
								rEngine.eval(outRemark2);
							}
						}
						
						//optional output if selected and if the number of environment levels is at least 5: Stability Analysis using Shukla
						if (stabilityShukla) {
							if (environmentLevels.length > 4) {
								String funcStability2 = "funcStability2 <- try(stability.analysis(genoEnvMeans, \"" + ybarName + "\", \"" + genotype + "\", \"" + environment + "\", method = \"shukla\"), silent=TRUE)";
								String outTestStability2 = "capture.output(cat(\"\nSTABILITY ANALYSIS USING SHUKLA'S MODEL:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
								String outTestStability2b = "capture.output(funcStability2[[1]][[1]]$stability,file=\"" + outFileName + "\",append = TRUE)";
								
								System.out.println(funcStability2);
								rEngine.eval(funcStability2);
								rEngine.eval(outTestStability2);
								
								String runSuccessStab = rEngine.eval("class(funcStability2)").asString();
								if (runSuccessStab != null && runSuccessStab.equals("try-error")) {	
									System.out.println("stability shukla: error");
									String checkError = "msg <- trim.strings(strsplit(funcStability2, \":\")[[1]])";
									String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
									String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
									String checkError4 = "capture.output(cat(\"*** \nERROR in stability.analysis function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
									rEngine.eval(checkError);
									rEngine.eval(checkError2);
									rEngine.eval(checkError3);
									rEngine.eval(checkError4);
								}
								else {
									rEngine.eval(outTestStability2b);
									rEngine.eval(outSpace);
								}
							} else {
								String outRemark = "capture.output(cat(\"\nSTABILITY ANALYSIS USING SHUKLA'S MODEL:\n\"),file=\"" + outFileName + "\",append = TRUE)";
								String outRemark2 = "capture.output(cat(\"***This is not done. The environment factor should have at least five levels.***\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
								
								rEngine.eval(outRemark);
								rEngine.eval(outRemark2);
							}
						}
											
						//optional output if selected and if the number of environment levels is at least 3: AMMI Biplot
						if (ammi) {
							if (environmentLevels.length > 2) {
								String ammiOut = "ammiOut <- try(ammi.analysis(genoEnvMeans[,match(\""+ environment +"\", names(genoEnvMeans))], genoEnvMeans[,match(\"" + genotype + "\", names(genoEnvMeans))], meaOne1$output[[" + i + "]]$harmonicMean, genoEnvMeans[,match(\"" + ybarName + "\", names(genoEnvMeans))], meaOne1$output[[" + i + "]]$MSE, number = FALSE, graph = \"biplot\", yVar = \"" + ybarName +"\"), silent=TRUE)"; 
								String outAmmi1 = "capture.output(cat(\"\nAMMI ANALYSIS:\n\"),file=\"" + outFileName + "\",append = TRUE)";
								String outAmmi2 = "capture.output(cat(\"Percentage of Total Variation Accounted for by the Principal Components: \n\n\"),file=\"" + outFileName + "\",append = TRUE)";;
								rEngine.eval(ammiOut);
								rEngine.eval(outAmmi1);
								System.out.println(ammiOut);
								
								String runSuccessAmmi = rEngine.eval("class(ammiOut)").asString();
								if (runSuccessAmmi != null && runSuccessAmmi.equals("try-error")) {	
									System.out.println("ammi: error");
									String checkError = "msg <- trim.strings(strsplit(ammiOut, \":\")[[1]])";
									String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
									String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
									String checkError4 = "capture.output(cat(\"*** \nERROR in ammi.analysis function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
									rEngine.eval(checkError);
									rEngine.eval(checkError2);
									rEngine.eval(checkError3);
									rEngine.eval(checkError4);
								} else {
									
									String outAmmi3 = "capture.output(ammiOut$analysis,file=\"" + outFileName + "\",append = TRUE)";
									rEngine.eval(outAmmi2);
									rEngine.eval(outAmmi3);
									rEngine.eval(outSpace);
									rEngine.eval(outSpace);
									rEngine.eval(outSpace);
								}
							} else {
								String outRemark = "capture.output(cat(\"\nAMMI ANALYSIS:\n\"),file=\"" + outFileName + "\",append = TRUE)";
								String outRemark2 = "capture.output(cat(\"***This is not done. The environment factor should have at least three levels.***\n\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
								
								rEngine.eval(outRemark);
								rEngine.eval(outRemark2);
							}
						}
					} //end of for loop respvars
					
					//optional output: diagnostic plots for genotype fixed
					if (diagnosticPlot) {
						String diagPlotsMea1SFunc = "diagPlotsMea1S <- try(graph.mea1s.diagplots(dataMeaOneStage, " + respvarVector + ", is.random = FALSE, meaOne1), silent=TRUE)";
						System.out.println(diagPlotsMea1SFunc);
						rEngine.eval(diagPlotsMea1SFunc);
						
						String runSuccessDiag = rEngine.eval("class(diagPlotsMea1S)").asString();
						if (runSuccessDiag != null && runSuccessDiag.equals("try-error")) {	
							System.out.println("diagnostic plot: error");
							String checkError = "msg <- trim.strings(strsplit(diagPlotsMea1S, \":\")[[1]])";
							String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
							String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
							String checkError4 = "capture.output(cat(\"*** \nERROR in creating diagnostic plot (fixed genotype):\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(checkError);
							rEngine.eval(checkError2);
							rEngine.eval(checkError3);
							rEngine.eval(checkError4);
						}
					}
				} //end of else for if runSuccess
			} //end of Fixed
			
			// Genotype Random
			if (genotypeRandom) {
				String funcMeaOneStageRandom = null;
				String groupVars = null;
				if (design == "RCB") {
					funcMeaOneStageRandom = "meaOne2 <- try(GEOneStage.test(\"" + design + "\",dataMeaOneStage,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column = NULL, rep = NULL,\"" + environment+ "\", is.genoRandom = TRUE), silent=TRUE)";
					groupVars = "c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\")";
				} else if (design == "Alpha") {
					funcMeaOneStageRandom = "meaOne2 <- try(GEOneStage.test(\"" + design + "\",dataMeaOneStage,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column = NULL,\"" + rep + "\",\"" + environment+ "\", is.genoRandom = TRUE), silent=TRUE)";
					groupVars = "c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\")";
				} else if (design == "RowCol") {
					funcMeaOneStageRandom = "meaOne2 <- try(GEOneStage.test(\"" + design + "\",dataMeaOneStage,"+ respvarVector + ",\"" + genotype + "\",\"" + row+ "\",\"" + column + "\",\"" + rep + "\",\""+ environment + "\", is.genoRandom = TRUE), silent=TRUE)";
					groupVars = "c(\"" + environment + "\", \"" + genotype + "\", \"" + rep + "\", \"" + row + "\", \"" + column + "\")";
				}

				String randomHead = "capture.output(cat(\"GENOTYPE AS: Random\n\"),file=\"" + outFileName + "\",append = TRUE)";
				rEngine.eval(funcMeaOneStageRandom);
				rEngine.eval(sep2);
				rEngine.eval(randomHead);
				rEngine.eval(sep2);
				rEngine.eval(outSpace);
				
				System.out.println(funcMeaOneStageRandom);
				String runSuccess2 = rEngine.eval("class(meaOne2)").asString();
				if (runSuccess2 != null && runSuccess2.equals("try-error")) {	
					System.out.println("GEOneStage.test: error");
					String checkError = "msg <- trim.strings(strsplit(meaOne2, \":\")[[1]])";
					String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
					String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
					String checkError4 = "capture.output(cat(\"*** \nERROR in GEOneStage.test function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(checkError);
					rEngine.eval(checkError2);
					rEngine.eval(checkError3);
					rEngine.eval(checkError4);

				}
				else {

				for (int k = 0; k < respvar.length; k++) {
					int i = k + 1; // 1-relative index;
					String respVarHead = "capture.output(cat(\"RESPONSE VARIABLE: " + respvar[k] + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(sep);
					rEngine.eval(respVarHead);
					rEngine.eval(sep);

					//default output: Trial Summary
					String funcTrialSum = "funcTrialSum <- try(class.information(" + groupVars + ",meaOne2$output[[" + i + "]]$data), silent=TRUE)";
					String trialSumHead = "capture.output(cat(\"\nDATA SUMMARY:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String trialObsRead = "capture.output(cat(\"Number of observations read: \", meaOne2$output[["	+ i	+ "]]$obsread[[1]],\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String trialObsUsed = "capture.output(cat(\"Number of observations used: \", meaOne2$output[["	+ i	+ "]]$obsused[[1]],\"\n\n\"),file=\""	+ outFileName + "\",append = TRUE)";
					String trialSum = "capture.output(funcTrialSum,file=\"" + outFileName + "\",append = TRUE)";

					rEngine.eval(funcTrialSum);
					
					String runSuccessTS = rEngine.eval("class(funcTrialSum)").asString();
					if (runSuccessTS != null && runSuccessTS.equals("try-error")) {	
						System.out.println("class info: error");
						String checkError = "msg <- trim.strings(strsplit(funcTrialSum, \":\")[[1]])";
						String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
						String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
						String checkError4 = "capture.output(cat(\"*** \nERROR in class.information function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(checkError);
						rEngine.eval(checkError2);
						rEngine.eval(checkError3);
						rEngine.eval(checkError4);
					}

					else {
						rEngine.eval(trialSumHead);
						rEngine.eval(trialObsRead);
						rEngine.eval(trialObsUsed);
						rEngine.eval(trialSum);
						rEngine.eval(outSpace);
					}	

					//optional output: for descriptive stat
					String funcDesc = "outDesc <- DescriptiveStatistics(dataMeaOneStage, \"" + respvar[k] + "\", grp = NULL)";
					rEngine.eval(funcDesc);
						
					if (descriptiveStat) {
						String outDescStat = "capture.output(cat(\"\nDESCRIPTIVE STATISTICS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outDescStat2 = "capture.output(outDesc,file=\"" + outFileName + "\",append = TRUE)"; 

						String runSuccessDescStat = rEngine.eval("class(outDesc)").asString();	
						if (runSuccessDescStat != null && runSuccessDescStat.equals("try-error")) {	
							System.out.println("desc stat: error");
							String checkError = "msg <- trim.strings(strsplit(outDesc, \":\")[[1]])";
							String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
							String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
							String checkError4 = "capture.output(cat(\"*** \nERROR in DescriptiveStatistics function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(checkError);
							rEngine.eval(checkError2);
							rEngine.eval(checkError3);
							rEngine.eval(checkError4);
						} 
						else {
							rEngine.eval(outDescStat);
							rEngine.eval(outDescStat2);
							rEngine.eval(outSpace);
						}	
					}

					//optional output: Variance Components
					if (varianceComponents) {
						String outVarComp = "capture.output(cat(\"\nVARIANCE COMPONENTS TABLE:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outVarComp2 = "capture.output(meaOne2$output[[" + i + "]]$varcomp.table,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outVarComp);
						rEngine.eval(outVarComp2);
						rEngine.eval(outSpace);
						}
					
					//default output: Test Genotypic Effect
					String outTestGeno1 = "capture.output(cat(\"\nTESTING FOR THE SIGNIFICANCE OF GENOTYPIC VARIANCE USING -2 LOGLIKELIHOOD RATIO TEST:\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestGeno2 = "capture.output(cat(\"\nFormula for Model1: \", meaOne1$output[[" + i + "]]$formula1,\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestGeno3 = "capture.output(cat(\"Formula for Model2: \", meaOne1$output[[" + i + "]]$formula2,\"\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestGeno4 = "capture.output(meaOne2$output[[" + i + "]]$testsig.Geno,file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(outTestGeno1);
					rEngine.eval(outTestGeno2);
					rEngine.eval(outTestGeno3);
					rEngine.eval(outTestGeno4);
					rEngine.eval(outSpace);
					
					//default output: Test Environment Effect
					String outTestEnv1 = "capture.output(cat(\"\nTESTING FOR THE SIGNIFICANCE OF ENVIRONMENT VARIANCE USING -2 LOGLIKELIHOOD RATIO TEST:\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestEnv2 = "capture.output(cat(\"\nFormula for Model1: \", meaOne1$output[[" + i + "]]$formula1,\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestEnv3 = "capture.output(cat(\"Formula for Model2: \", meaOne1$output[[" + i + "]]$formula3,\"\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestEnv4 = "capture.output(meaOne2$output[[" + i + "]]$testsig.Env,file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(outTestEnv1);
					rEngine.eval(outTestEnv2);
					rEngine.eval(outTestEnv3);
					rEngine.eval(outTestEnv4);
					rEngine.eval(outSpace);
					
					//default output: Test GXE Effect
					String outTestGenoEnv1 = "capture.output(cat(\"\nTESTING FOR THE SIGNIFICANCE OF GENOTYPE X ENVIRONMENT VARIANCE USING -2 LOGLIKELIHOOD RATIO TEST:\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestGenoEnv2 = "capture.output(cat(\"\nFormula for Model1: \", meaOne1$output[[" + i + "]]$formula1,\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestGenoEnv3 = "capture.output(cat(\"Formula for Model2: \", meaOne1$output[[" + i + "]]$formula4,\"\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestGenoEnv4 = "capture.output(meaOne2$output[[" + i + "]]$testsig.GenoEnv,file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(outTestGenoEnv1);
					rEngine.eval(outTestGenoEnv2);
					rEngine.eval(outTestGenoEnv3);
					rEngine.eval(outTestGenoEnv4);
					rEngine.eval(outSpace);
					
					//default output: Genotype X Environment Means
					String outGenoEnv = "capture.output(cat(\"\nGENOTYPE X ENVIRONMENT MEANS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outGenoEnv2 = "capture.output(meaOne2$output[[" + i + "]]$means.GenoEnv,file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(outGenoEnv);
					rEngine.eval(outGenoEnv2);
					rEngine.eval(outSpace);

					//default output: Genotype Means
					String outDescStat = "capture.output(cat(\"\nPREDICTED GENOTYPE MEANS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outDescStat2 = "capture.output(meaOne2$output[[" + i + "]]$means.Geno,file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(outDescStat);
					rEngine.eval(outDescStat2);
					rEngine.eval(outSpace);
											
					//default output: EstHerit
					String outEstHerit = "capture.output(cat(\"\nHERITABILITY:\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outEstHerit2 = "capture.output(meaOne2$output[[" + i + "]]$heritability,file=\""	+ outFileName + "\",append = TRUE)";
					rEngine.eval(outEstHerit);
					rEngine.eval(outEstHerit2);
					rEngine.eval(outSpace);

				}
				
				//optional output: diagnostic plots for genotype random
				if (diagnosticPlot) {
					String diagPlotsMea1SFunc = "diagPlotsMea1S <- tryCatch(graph.mea1s.diagplots(dataMeaOneStage, " + respvarVector + ", is.random = TRUE, meaOne2), error=function(err) \"notRun\")";
					System.out.println(diagPlotsMea1SFunc);
					rEngine.eval(diagPlotsMea1SFunc);
					
					String runSuccessDiag = rEngine.eval("class(diagPlotsMea1S)").asString();
					if (runSuccessDiag != null && runSuccessDiag.equals("try-error")) {	
						System.out.println("diagnostic plot: error");
						String checkError = "msg <- trim.strings(strsplit(diagPlotsMea1S, \":\")[[1]])";
						String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
						String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
						String checkError4 = "capture.output(cat(\"*** \nERROR in creating diagnostic plot (fixed genotype):\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(checkError);
						rEngine.eval(checkError2);
						rEngine.eval(checkError3);
						rEngine.eval(checkError4);
					}

				}
					
				} //end of else for if runSuccess
			} // end of if random
			
			//default output: save residuals
			 String funcResidFixed = null;
			 String funcResidRandom = null;
			 String funcMergeDataResidF = null;
			 String funcMergeDataResidR = null;
			 String funcResidAll = null;
			 if (design == "RCB") {
				 funcResidFixed = "meaOne2res_f <- GEOneStage_resid(meaOne1, exptl.design = \"RCB\", " + respvarVector + ", \"" + genotype + "\", \"" + block + "\", column=NULL, rep = NULL, \"" + environment + "\",is.genoRandom = FALSE)";
				 funcResidRandom = "meaOne2res_r <- GEOneStage_resid(meaOne2, exptl.design = \"RCB\", " + respvarVector + ", \"" + genotype + "\", \"" + block + "\", column=NULL, rep = NULL, \"" + environment + "\",is.genoRandom = TRUE)";
				 funcMergeDataResidF = "data_resid <- merge(dataMeaOneStage,meaOne2res_f,by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + respvar[0] + "\"))";
				 funcMergeDataResidR = "data_resid <- merge(dataMeaOneStage,meaOne2res_r,by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + respvar[0] + "\"))";
			 } else if (design == "Alpha") {
				 funcResidFixed = "meaOne2res_f <- GEOneStage_resid(meaOne1, exptl.design = \"Alpha\", " + respvarVector + ", \"" + genotype + "\", \"" + block + "\", column=NULL, \"" + rep + "\", \"" + environment + "\",is.genoRandom = FALSE)";
				 funcResidRandom = "meaOne2res_r <- GEOneStage_resid(meaOne2, exptl.design = \"Alpha\", " + respvarVector + ", \"" + genotype + "\", \"" + block + "\", column=NULL, \"" + rep + "\", \"" + environment + "\",is.genoRandom = TRUE)";
				 funcMergeDataResidF = "data_resid <- merge(dataMeaOneStage,meaOne2res_f,by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\", \"" + respvar[0] + "\"))";
				 funcMergeDataResidR = "data_resid <- merge(dataMeaOneStage,meaOne2res_r,by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\", \"" + respvar[0] + "\"))";
			 } else if (design == "RowCol") {
				 funcResidFixed = "meaOne2res_f <- GEOneStage_resid(meaOne1, exptl.design = \"RowCol\", " + respvarVector + ", \"" + genotype + "\", \"" + block + "\", \"" + column + "\", \"" + rep + "\", \"" + environment + "\",is.genoRandom = FALSE)";
				 funcResidRandom = "meaOne2res_r <- GEOneStage_resid(meaOne2, exptl.design = \"RowCol\", " + respvarVector + ", \"" + genotype + "\", \"" + block + "\", \"" + column + "\", \"" + rep + "\", \"" + environment + "\",is.genoRandom = TRUE)";
				 funcMergeDataResidF = "data_resid <- merge(dataMeaOneStage,meaOne2res_f,by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\", \"" + column + "\", \"" + respvar[0] + "\"))";
				 funcMergeDataResidR = "data_resid <- merge(dataMeaOneStage,meaOne2res_r,by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\", \"" + column + "\", \"" + respvar[0] + "\"))";
			 }
			  
			 if ((genotypeFixed) & (genotypeRandom == false)) {
				 	String func1SaveResidualsCsv = "saveResid <- tryCatch(write.table(data_resid,file =\"" + resultFolderPath + "residuals.csv\",sep=\",\",row.names=FALSE))";
					rEngine.eval(funcResidFixed);
					rEngine.eval(funcMergeDataResidF);
					rEngine.eval(func1SaveResidualsCsv);
			 } 
			 else if ((genotypeFixed == false) & (genotypeRandom)) {
				  	String func2SaveResidualsCsv = "saveResid <- tryCatch(write.table(data_resid,file =\"" + resultFolderPath + "residuals.csv\",sep=\",\",row.names=FALSE))";
					rEngine.eval(funcResidRandom);
					rEngine.eval(funcMergeDataResidR);
					rEngine.eval(func2SaveResidualsCsv);

			 } else if ((genotypeFixed) & (genotypeRandom)) {
//				  	String funcResidRandom2 = null;
				  	String funcMergeDataResid = null;
				  	if (design == "RCB") {
				  		funcResidAll = "meaOne2res_all <- merge(meaOne2res_f,meaOne2res_r, by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + respvar[0] + "\"))";
				  		funcMergeDataResid = "data_resid <- merge(dataMeaOneStage,meaOne2res_all, by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + respvar[0] + "\"))";
					} else if (design == "Alpha") {
						funcResidAll = "meaOne2res_all <- merge(meaOne2res_f,meaOne2res_r, by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\", \"" + respvar[0] + "\"))";
						funcMergeDataResid = "data_resid <- merge(dataMeaOneStage,meaOne2res_all, by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\", \"" + respvar[0] + "\"))";
					} else if (design == "RowCol") {
						funcResidAll = "meaOne2res_all <- merge(meaOne2res_f,meaOne2res_r, by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\", \"" + column + "\", \"" + respvar[0] + "\"))";
						funcMergeDataResid = "data_resid <- merge(dataMeaOneStage,meaOne2res_all, by=c(\"" + environment + "\", \"" + genotype + "\", \"" + block + "\", \"" + rep + "\", \"" + column + "\", \"" + respvar[0] + "\"))";
					}
  	
				  	String funcSaveResidualsCsv = "saveResid <- tryCatch(write.table(data_resid,file =\"" + resultFolderPath + "residuals.csv\",sep=\",\",row.names=FALSE))";
					
				  	rEngine.eval(funcResidFixed);
					rEngine.eval(funcResidRandom);
					rEngine.eval(funcResidAll);
					rEngine.eval(funcMergeDataResid);
					rEngine.eval(funcSaveResidualsCsv);
					
			 }
			String runSuccessSaveResid = rEngine.eval("saveResid").asString();
			//generate warning if error occurred	
			if (runSuccessSaveResid != null && runSuccessSaveResid.equals("notRun")) {	
				System.out.println("error");
				rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Residuals not saved.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
			}

			//boxplot and histogram
			String withBox = "FALSE";
			if (boxplotRawData) withBox = "TRUE";
			String withHist = "FALSE";
			if (histogramRawData) withHist = "TRUE";
			String meaOut = "meaOne1";
			if (genotypeFixed) meaOut = "meaOne1";
			else if (genotypeRandom) meaOut = "meaOne2";

			String boxHistMeaFunc = "boxHistMea <- tryCatch(graph.mea1s.boxhist(dataMeaOneStage, " + respvarVector + ", " + meaOut + ", box = \"" + withBox + "\", hist = \"" + withHist + "\"), error=function(err) \"notRun\")";
			System.out.println(boxHistMeaFunc);
			rEngine.eval(boxHistMeaFunc);
				
			String runSuccessBoxHistMea = rEngine.eval("boxHistMea").asString();
			//generate warning if error occurred	
			if (runSuccessBoxHistMea != null && runSuccessBoxHistMea.equals("notRun")) {	
				System.out.println("error");
				rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Boxplot(s) and histogram(s) not created.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
			}
			
			rEngine.eval(outSpace); 
			rEngine.eval(sep2);
			
			rEngineEnd();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void doMultiEnvironmentSecondStage(String dataFileName, String outFileName, String resultFolderPath, String weightOption, String[] respvar, String[] standardErrors, String[] residualVariances, String[] numberOfReps, 
			String environment, String[] environmentLevels, String genotype, boolean descriptiveStat, boolean varianceComponents, boolean testGenotypicEffect, 
			boolean testGxEEffect, boolean boxplotRawData, boolean histogramRawData, boolean diagnosticPlot, boolean genotypeFixed, boolean performPairwise, String pairwiseAlpha, String[] genotypeLevels, 
			String[] controlLevels, boolean compareControl, boolean performAllPairwise, boolean genotypeRandom) {
		
		String respvarVector= inputTransform.createRVector(respvar);
		String standardErrorsVector= inputTransform.createRVector(standardErrors);
		String residualVariancesVector= inputTransform.createRVector(residualVariances);
		String numberOfRepsVector = inputTransform.createRVector(numberOfReps); 
		
		try {
			String readData = "dataMeaTwoStage <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
			System.out.println(readData);
			rEngine.eval(readData);
			
			String runSuccessData = rEngine.eval("dataMeaTwoStage").asString();
			
			if (runSuccessData != null && runSuccessData.equals("notRun")) {	
				System.out.println("error");
				rEngine.eval("capture.output(cat(\"\n***Error reading data.***\n\"),file=\"" + outFileName + "\",append = FALSE)"); //append to output file?
			}
			else {
				String setWd = "setwd(\"" + resultFolderPath + "\")";
				System.out.println(setWd);
				rEngine.eval(setWd);
			}
			
			String usedData = "capture.output(cat(\"\nDATA FILE: " + dataFileName + "\n\",file=\"" + outFileName + "\"))";
			String outFile = "capture.output(cat(\"\nMULTI-ENVIRONMENT ANALYSIS (TWO-STAGE)\n\"),file=\"" + outFileName + "\", append = TRUE)";
			String sep = "capture.output(cat(\"------------------------------\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String sep2 = "capture.output(cat(\"==============================\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String outSpace = "capture.output(cat(\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
			rEngine.eval(usedData);
			rEngine.eval(outFile);
			
			if (weightOption == "none") {
				String outWeights = "capture.output(cat(\"\nWEIGHT OPTION: NONE\n\"),file=\"" + outFileName + "\", append = TRUE)";
				rEngine.eval(outWeights);
				rEngine.eval(outSpace);
			} else {
				String outWeights = "capture.output(cat(\"\nWEIGHT OPTION: 1/(sem^2)\n\"),file=\"" + outFileName + "\", append = TRUE)";
				rEngine.eval(outWeights);
				rEngine.eval(outSpace);
			}
		
			// OUTPUT
			// Genotype Fixed
			if (genotypeFixed) {
				String funcMeaFixed = null;
				if (weightOption=="none") 
					funcMeaFixed = "meaTwo1 <- try(GETwoStage.test(dataMeaTwoStage, " + respvarVector + ",stderr = NULL," + residualVariancesVector + "," + numberOfRepsVector + ",\"" + genotype + "\",\"" + environment + "\", weight = \"" + weightOption + "\", is.genoRandom = FALSE), silent=TRUE)";
				else funcMeaFixed = "meaTwo1 <- try(GETwoStage.test(dataMeaTwoStage, " + respvarVector + "," + standardErrorsVector + "," + residualVariancesVector + "," + numberOfRepsVector + ",\"" + genotype + "\",\"" + environment + "\", weight = \"" + weightOption + "\", is.genoRandom = FALSE), silent=TRUE)";

				String fixedHead = "capture.output(cat(\"GENOTYPE AS: Fixed\n\"),file=\""+ outFileName + "\",append = TRUE)";
				
				System.out.println(funcMeaFixed);
				rEngine.eval(funcMeaFixed);
				rEngine.eval(sep2);
				rEngine.eval(fixedHead);
				rEngine.eval(sep2);
				rEngine.eval(outSpace);
				
				String runSuccess = rEngine.eval("class(meaTwo1)").asString();
				if (runSuccess != null && runSuccess.equals("try-error")) {	
					System.out.println("MEATwoStage.test: error");
					String checkError = "msg <- trim.strings(strsplit(meaTwo1, \":\")[[1]])";
					String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
					String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
					String checkError4 = "capture.output(cat(\"*** \nERROR in GETwoStage.test function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(checkError);
					rEngine.eval(checkError2);
					rEngine.eval(checkError3);
					rEngine.eval(checkError4);
				}
				else {
					for (int k = 0; k < respvar.length; k++) {
						int i = k + 1; // 1-relative index;
						String respVarHead = "capture.output(cat(\"RESPONSE VARIABLE: " + respvar[k] + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(sep);
						rEngine.eval(respVarHead);
						rEngine.eval(sep);
						
						
						// default output: Trial Summary
						String funcTrialSum = "funcTrialSum <- try(class.information(c(\"" + genotype + "\",\"" + environment + "\"),meaTwo1[[" + i + "]]$data), silent=TRUE)";
						String trialSumHead = "capture.output(cat(\"\nDATA SUMMARY:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsRead = "capture.output(cat(\"Number of observations read: \", meaTwo1[["	+ i	+ "]]$obsread[[1]],\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsUsed = "capture.output(cat(\"Number of observations used: \", meaTwo1 [["	+ i	+ "]]$obsused[[1]],\"\n\n\"),file=\""	+ outFileName + "\",append = TRUE)";
						String trialSum = "capture.output(funcTrialSum,file=\"" + outFileName + "\",append = TRUE)";

						rEngine.eval(funcTrialSum);
						String runSuccessTS = rEngine.eval("class(funcTrialSum)").asString();
						if (runSuccessTS != null && runSuccessTS.equals("try-error")) {	
							System.out.println("class info: error");
							String checkError = "msg <- trim.strings(strsplit(funcTrialSum, \":\")[[1]])";
							String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
							String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
							String checkError4 = "capture.output(cat(\"*** \nERROR in class.information function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(checkError);
							rEngine.eval(checkError2);
							rEngine.eval(checkError3);
							rEngine.eval(checkError4);
						}
						else {
							rEngine.eval(trialSumHead);
							rEngine.eval(trialObsRead);
							rEngine.eval(trialObsUsed);
							rEngine.eval(trialSum);
							rEngine.eval(outSpace);
						}	
	
						//optional output: descriptive statistics
						String funcDesc = "outDesc <- try(DescriptiveStatistics(dataMeaTwoStage, \"" + respvar[k] + "\", grp = NULL), silent=TRUE)";
						rEngine.eval(funcDesc);
	
						if (descriptiveStat) {
							String outDescStat = "capture.output(cat(\"\nDESCRIPTIVE STATISTICS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outDescStat2 = "capture.output(outDesc,file=\"" + outFileName + "\",append = TRUE)"; 
	
							String runSuccessDescStat = rEngine.eval("class(outDesc)").asString();	
							if (runSuccessDescStat != null && runSuccessDescStat.equals("try-error")) {	
								System.out.println("desc stat: error");
								String checkError = "msg <- trim.strings(strsplit(outDesc, \":\")[[1]])";
								String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
								String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
								String checkError4 = "capture.output(cat(\"*** \nERROR in DescriptiveStatistics function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(checkError);
								rEngine.eval(checkError2);
								rEngine.eval(checkError3);
								rEngine.eval(checkError4);
							} 
							else {
								rEngine.eval(outDescStat);
								rEngine.eval(outDescStat2);
								rEngine.eval(outSpace);
							}
						}
	
						//optional output: Variance Components
						if (varianceComponents) {
							String outVarComp = "capture.output(cat(\"\nVARIANCE COMPONENTS TABLE:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outVarComp2 = "capture.output(meaTwo1[[" + i + "]]$varcomp.table,file=\"" + outFileName + "\",append = TRUE)";
	
							rEngine.eval(outVarComp);
							rEngine.eval(outVarComp2);
							rEngine.eval(outSpace);
						}
						
						//optional output: TestGenEffect
						if (testGenotypicEffect) {
//							String outTestGen = "capture.output(cat(\"\nTesting for Significance of Genotypic Effect:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outTestGen2 = "capture.output(meaTwo1[[" + i + "]]$testsig.Geno,file=\"" + outFileName + "\",append = TRUE)";
							String outTestGen4 = "capture.output(meaTwo1[[" + i + "]]$anova.table.test,file=\"" + outFileName + "\",append = TRUE)";
	
							rEngine.eval(outSpace);
							rEngine.eval(outTestGen2);
							rEngine.eval(outSpace);
							rEngine.eval(outTestGen4);
							rEngine.eval(outSpace);
						}
						
						//default output: Genotype Means
						String outDescStat = "capture.output(cat(\"\nGENOTYPE LSMEANS AND STANDARD ERRORS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outDescStat2 = "capture.output(meaTwo1[[" + i + "]]$means.Geno,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outDescStat);
						rEngine.eval(outDescStat2);
						rEngine.eval(outSpace);
						
						//optional output: Perform Pairwise
						if (performPairwise) {
							double pairwiseSig = Double.valueOf(pairwiseAlpha);
							
							rEngine.rniAssign("trmt.levels",	rEngine.rniPutStringArray(genotypeLevels),	0); // a string array from OptionsPage
							if (compareControl == true) {
								rEngine.rniAssign("controlLevels",rEngine.rniPutStringArray(controlLevels),0); // a string array from OptionsPage
								String funcPairwise = "pwControl <- try(ssa.pairwise(meaTwo1[[" + i + "]]$model, type = \"Dunnett\", alpha = "	+ pairwiseSig + ", control.level = controlLevels), silent=TRUE)";
								String outCompareControl = "capture.output(cat(\"\nSIGNIFICANT PAIRWISE COMPARISONS (IF ANY): \nCompared with control(s)\n\n\"),file=\"" + outFileName	+ "\",append = TRUE)";
								String outCompareControl2n = "capture.output(pwControl,file=\""	+ outFileName	+ "\",append = TRUE)";
								System.out.println(funcPairwise);
								rEngine.eval(funcPairwise);
								
								String runSuccessPwC = rEngine.eval("class(pwControl)").asString();	
								if (runSuccessPwC != null && runSuccessPwC.equals("try-error")) {	
									System.out.println("compare with control: error");
									String checkError = "msg <- trim.strings(strsplit(pwControl, \":\")[[1]])";
									String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
									String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
									String checkError4 = "capture.output(cat(\"*** \nERROR in ssa.pairwise function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
									rEngine.eval(checkError);
									rEngine.eval(checkError2);
									rEngine.eval(checkError3);
									rEngine.eval(checkError4);
									rEngine.eval(outSpace);
									rEngine.eval(outSpace);
								}
								else {
									rEngine.eval(outCompareControl);
									rEngine.eval(outCompareControl2n);
									rEngine.eval(outSpace);
								}
							} else if (performAllPairwise) {
								String outPerformAllPairwise = "capture.output(cat(\"\nSIGNIFICANT PAIRWISE COMPARISONS (IF ANY): \n\n\"),file=\""	+ outFileName	+ "\",append = TRUE)";
								rEngine.eval(outPerformAllPairwise);
								if (genotypeLevels.length > 0 & genotypeLevels.length < 16) {
									String funcPairwise = "pwAll <- try(ssa.pairwise(meaTwo1[[" + i + "]]$model, type = \"Tukey\", alpha = "+ pairwiseSig + ", control.level = NULL), silent=TRUE)";
									String outPerformAllPairwise2n = "capture.output(pwAll,file=\"" + outFileName + "\",append = TRUE)";
									System.out.println(funcPairwise);
									rEngine.eval(funcPairwise);
	
									String runSuccessPwAll = rEngine.eval("class(pwAll)").asString();
									if (runSuccessPwAll != null && runSuccessPwAll.equals("try-error")) {	
										System.out.println("all pairwise: error");
										String checkError = "msg <- trim.strings(strsplit(pwAll, \":\")[[1]])";
										String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
										String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
										String checkError4 = "capture.output(cat(\"*** \nERROR in ssa.pairwise function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
										rEngine.eval(checkError);
										rEngine.eval(checkError2);
										rEngine.eval(checkError3);
										rEngine.eval(checkError4);
									}
									else {
										rEngine.eval(outPerformAllPairwise2n);
										rEngine.eval(outSpace);
										rEngine.eval(outSpace);
									}	
								} else {
									String nLevelsLarge = "capture.output(cat(\"***\nExceeded maximum number of genotypes that can be compared. \n***\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
									rEngine.eval(nLevelsLarge);
								}
							}
						} //end of performPairwise
	
						//default output if the number of environment levels is at least 5: Stability Analysis using Regression
						if (environmentLevels.length > 4) {
							String funcStability1 = "funcStability1 <- try(stability.analysis(dataMeaTwoStage, " + respvarVector + ", \"" + genotype + "\", \"" + environment + "\", method = \"regression\"), silent=TRUE)";
							String outTestStability1 = "capture.output(cat(\"\nSTABILITY ANALYSIS USING FINLAY-WILKINSON MODEL:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outTestStability1b = "capture.output(funcStability1[[1]][[1]]$stability,file=\"" + outFileName + "\",append = TRUE)";
							
							System.out.println(funcStability1);
							rEngine.eval(outTestStability1);
							rEngine.eval(funcStability1);
							
							String runSuccessStab = rEngine.eval("class(funcStability1)").asString();
							if (runSuccessStab != null && runSuccessStab.equals("try-error")) {	
								System.out.println("stability reg: error");
								String checkError = "msg <- trim.strings(strsplit(funcStability1, \":\")[[1]])";
								String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
								String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
								String checkError4 = "capture.output(cat(\"*** \nERROR in stability.analysis function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(checkError);
								rEngine.eval(checkError2);
								rEngine.eval(checkError3);
								rEngine.eval(checkError4);
							}
							else {
								rEngine.eval(outTestStability1b);
								rEngine.eval(outSpace);
							}
						}	else {
							String outRemark = "capture.output(cat(\"\nSTABILITY ANALYSIS USING FINLAY-WILKINSON MODEL:\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outRemark2 = "capture.output(cat(\"***This is not done. The environment factor should have at least five levels.***\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							
							rEngine.eval(outRemark);
							rEngine.eval(outRemark2);
						}

	
						//default output: Stability Analysis using Shukla
						if (environmentLevels.length > 4) {
							String funcStability2 = "funcStability2 <- try(stability.analysis(dataMeaTwoStage, " + respvarVector + ", \"" + genotype + "\", \"" + environment + "\", method = \"shukla\"), silent=TRUE)";
							String outTestStability2 = "capture.output(cat(\"\nSTABILITY ANALYSIS USING SHUKLA'S MODEL:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outTestStability2b = "capture.output(funcStability2[[1]][[1]]$stability,file=\"" + outFileName + "\",append = TRUE)";
							
							System.out.println(funcStability2);
							rEngine.eval(outTestStability2);
							rEngine.eval(funcStability2);
							
							String runSuccessStab = rEngine.eval("class(funcStability2)").asString();
							if (runSuccessStab != null && runSuccessStab.equals("try-error")) {	
								System.out.println("stability shukla: error");
								String checkError = "msg <- trim.strings(strsplit(funcStability2, \":\")[[1]])";
								String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
								String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
								String checkError4 = "capture.output(cat(\"*** \nERROR in stability.analysis function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(checkError);
								rEngine.eval(checkError2);
								rEngine.eval(checkError3);
								rEngine.eval(checkError4);
							}
							else {
								rEngine.eval(outTestStability2b);
								rEngine.eval(outSpace);
							}
						}   else {
							String outRemark = "capture.output(cat(\"\nSTABILITY ANALYSIS USING SHUKLA'S MODEL:\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outRemark2 = "capture.output(cat(\"***This is not done. The environment factor should have at least five levels.***\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							
							rEngine.eval(outRemark);
							rEngine.eval(outRemark2);
						}
	
						
						//default output: AMMI Biplot
						if (environmentLevels.length > 2) {
							String funcAmmi = "ammiOut <- try(ammi.analysis2(meaTwo1[[" + i + "]]$data[,match(\""+ environment +"\", names(meaTwo1[[" + i + "]]$data))], meaTwo1[[" + i + "]]$data[,match(\"" + genotype + "\", names(meaTwo1[[" + i + "]]$data))], meaTwo1[[" + i + "]]$data[,match(\"" + numberOfReps[i-1] + "\", names(meaTwo1[[" + i + "]]$data))], meaTwo1[[" + i + "]]$data[, match(\"" + respvar[i-1] + "\", names(meaTwo1[[" + i + "]]$data))], meaTwo1[[" + i + "]]$data[,match(\"" + residualVariances[i-1] + "\", names(meaTwo1[[" + i + "]]$data))], number = TRUE, graphtype = \"biplot\", respVar = \"" + respvar[k]+"\"), silent=TRUE)";
							String outAmmi1 = "capture.output(cat(\"\nAMMI ANALYSIS:\n\"),file=\"" + outFileName + "\",append = TRUE)";;
							String outAmmi2 = "capture.output(cat(\"Percentage of Total Variation Accounted for by the Principal Components: \n\n\"),file=\"" + outFileName + "\",append = TRUE)";;
							String outAmmi3 = "capture.output(ammiOut$analysis,file=\"" + outFileName + "\",append = TRUE)";
							System.out.println(funcAmmi);
							rEngine.eval(funcAmmi);
							rEngine.eval(outAmmi1);
							
							String runSuccessAmmi = rEngine.eval("class(ammiOut)").asString();
							if (runSuccessAmmi != null && runSuccessAmmi.equals("try-error")) {	
								System.out.println("ammi: error");
								String checkError = "msg <- trim.strings(strsplit(ammiOut, \":\")[[1]])";
								String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
								String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
								String checkError4 = "capture.output(cat(\"*** \nERROR in ammi.analysis function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(checkError);
								rEngine.eval(checkError2);
								rEngine.eval(checkError3);
								rEngine.eval(checkError4);
							} 
							else {
								rEngine.eval(outAmmi2);
								rEngine.eval(outAmmi3);
								rEngine.eval(outSpace);
								rEngine.eval(outSpace);
							}	
						} else {
							String outRemark = "capture.output(cat(\"\nAMMI ANALYSIS:\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outRemark2 = "capture.output(cat(\"***This is not done. The environment factor should have at least three levels.***\n\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							
							rEngine.eval(outRemark);
							rEngine.eval(outRemark2);
						}
							
						
					}//end of for loop for respvars 
				
					//optional output: Diagnostic plots for genotype fixed
					if (diagnosticPlot) {
						String diagPlotsMea2SFunc = "diagPlotsMea2S <- try(graph.mea2s.diagplots(dataMeaTwoStage, " + respvarVector + ", is.random = FALSE, meaTwo1), silent=TRUE)";
						System.out.println(diagPlotsMea2SFunc);
						rEngine.eval(diagPlotsMea2SFunc);
						
						String runSuccessDiagPlotsMea2S = rEngine.eval("diagPlotsMea2S").asString();
						if (runSuccessDiagPlotsMea2S != null && runSuccessDiagPlotsMea2S.equals("notRun")) {	
							System.out.println("error");
							rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Diagnostic plots for fixed genotype not created.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
						}
					}
				} //end of else for if runSuccess
			} //end of Fixed
			
			// Genotype Random
			if (genotypeRandom == true) {
				String funcMeaRandom = null;
				if (weightOption == "none") 
					funcMeaRandom = "meaTwo2 <- try(GETwoStage.test(dataMeaTwoStage, " + respvarVector + ",stderr = NULL," + residualVariancesVector + "," + numberOfRepsVector + ",\"" + genotype + "\",\"" + environment + "\", weight = \"" + weightOption + "\", is.genoRandom = TRUE), silent=TRUE)";
				else funcMeaRandom = "meaTwo2 <- try(GETwoStage.test(dataMeaTwoStage, " + respvarVector + "," + standardErrorsVector + "," + residualVariancesVector + "," + numberOfRepsVector + ",\"" + genotype + "\",\"" + environment + "\", weight = \"" + weightOption + "\", is.genoRandom = TRUE), silent=TRUE)";

				String randomHead = "capture.output(cat(\"GENOTYPE AS: Random\n\"),file=\"" + outFileName + "\",append = TRUE)";
				
				System.out.println(funcMeaRandom);
				rEngine.eval(funcMeaRandom);
				rEngine.eval(outSpace);
				rEngine.eval(sep2);
				rEngine.eval(randomHead);
				rEngine.eval(sep2);
				rEngine.eval(outSpace);

				String runSuccess = rEngine.eval("class(meaTwo2)").asString();
				if (runSuccess != null && runSuccess.equals("try-error")) {	
					System.out.println("MEATwoStage.test: error");
					String checkError = "msg <- trim.strings(strsplit(meaTwo2, \":\")[[1]])";
					String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
					String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
					String checkError4 = "capture.output(cat(\"*** \nERROR in GETwoStage.test function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(checkError);
					rEngine.eval(checkError2);
					rEngine.eval(checkError3);
					rEngine.eval(checkError4);
				}
				else {
					for (int k = 0; k < respvar.length; k++) {
						int i = k + 1; // 1-relative index;
						String respVarHead = "capture.output(cat(\"RESPONSE VARIABLE: " + respvar[k] + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(sep);
						rEngine.eval(respVarHead);
						rEngine.eval(sep);
	
						//default output: Trial Summary
						String funcTrialSum = "funcTrialSum <- try(class.information(c(\"" + genotype + "\",\"" + environment + "\"),meaTwo2[[" + i + "]]$data), silent=TRUE)";
						String trialSumHead = "capture.output(cat(\"\nDATA SUMMARY:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsRead = "capture.output(cat(\"Number of observations read: \", meaTwo2[["	+ i	+ "]]$obsread[[1]],\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsUsed = "capture.output(cat(\"Number of observations used: \", meaTwo2[["	+ i	+ "]]$obsused[[1]],\"\n\n\"),file=\""	+ outFileName + "\",append = TRUE)";
						String trialSum = "capture.output(funcTrialSum,file=\"" + outFileName + "\",append = TRUE)";

						rEngine.eval(funcTrialSum);
						
						String runSuccessTS = rEngine.eval("class(funcTrialSum)").asString();
						if (runSuccessTS != null && runSuccessTS.equals("try-error")) {	
							System.out.println("class info: error");
							String checkError = "msg <- trim.strings(strsplit(funcTrialSum, \":\")[[1]])";
							String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
							String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
							String checkError4 = "capture.output(cat(\"*** \nERROR in class.information function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
							rEngine.eval(checkError);
							rEngine.eval(checkError2);
							rEngine.eval(checkError3);
							rEngine.eval(checkError4);
						}
						else {
							rEngine.eval(trialSumHead);
							rEngine.eval(trialObsRead);
							rEngine.eval(trialObsUsed);
							rEngine.eval(trialSum);
							rEngine.eval(outSpace);
						}
	
						//optional output: descriptive statistics
						String funcDesc = "outDesc <- try(DescriptiveStatistics(dataMeaTwoStage, \"" + respvar[k] + "\", grp = NULL), silent=TRUE)";
						rEngine.eval(funcDesc);
	
						if (descriptiveStat) {
							String outDescStat = "capture.output(cat(\"\nDESCRIPTIVE STATISTICS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outDescStat2 = "capture.output(outDesc,file=\"" + outFileName + "\",append = TRUE)"; 
	
							String runSuccessDescStat = rEngine.eval("class(outDesc)").asString();	
							if (runSuccessDescStat != null && runSuccessDescStat.equals("try-error")) {	
								System.out.println("desc stat: error");
								String checkError = "msg <- trim.strings(strsplit(outDesc, \":\")[[1]])";
								String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
								String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
								String checkError4 = "capture.output(cat(\"*** \nERROR in DescriptiveStatistics function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
								rEngine.eval(checkError);
								rEngine.eval(checkError2);
								rEngine.eval(checkError3);
								rEngine.eval(checkError4);
							}
							else {
								rEngine.eval(outDescStat);
								rEngine.eval(outDescStat2);
								rEngine.eval(outSpace);
							}
						}
	
						//optional output: Variance Components
						if (varianceComponents) {
							String outVarComp = "capture.output(cat(\"\nVARIANCE COMPONENTS TABLE:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outVarComp2 = "capture.output(meaTwo2[[" + i + "]]$varcomp.table,file=\"" + outFileName + "\",append = TRUE)";
	
							rEngine.eval(outVarComp);
							rEngine.eval(outVarComp2);
							rEngine.eval(outSpace);
							}
						
						//optional output: TestGenEffect
						if (testGenotypicEffect) {
//							String outTestGen = "capture.output(cat(\"\nTest for Significance of Genotypic Effect:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outTestGen2 = "capture.output(meaTwo2[[" + i + "]]$testsig.Geno,file=\"" + outFileName + "\",append = TRUE)";
	
							rEngine.eval(outSpace);
							rEngine.eval(outTestGen2);
							rEngine.eval(outSpace);
						}
						
						//default output: Genotype Means
						String outDescStat = "capture.output(cat(\"\nPREDICTED GENOTYPE MEANS:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outDescStat2 = "capture.output(meaTwo2[[" + i + "]]$means.Geno,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outDescStat);
						rEngine.eval(outDescStat2);
						rEngine.eval(outSpace);
						
						// default output if no weight is selected: Estimate Heritability
						if (weightOption == "none") {
							String outEstHerit = "capture.output(cat(\"\nHERITABILITY:\n\"),file=\"" + outFileName + "\",append = TRUE)";
							String outEstHerit2 = "capture.output(meaTwo2[[" + i + "]]$heritability,file=\""	+ outFileName + "\",append = TRUE)";
	
							rEngine.eval(outEstHerit);
							rEngine.eval(outEstHerit2);
							rEngine.eval(outSpace);
						}
					}
				
					//diagnostic plots for genotype random
					if (diagnosticPlot) {
						String diagPlotsMea2SFunc = "diagPlotsMea2S <- tryCatch(graph.mea2s.diagplots(dataMeaTwoStage, " + respvarVector + ", is.random = TRUE, meaTwo2), error=function(err) \"notRun\")";
						System.out.println(diagPlotsMea2SFunc);
						rEngine.eval(diagPlotsMea2SFunc);
						
						String runSuccessDiagPlotsMea2S = rEngine.eval("diagPlotsMea2S").asString();
						if (runSuccessDiagPlotsMea2S != null && runSuccessDiagPlotsMea2S.equals("notRun")) {	
							System.out.println("error");
							rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Diagnostic plots for random genotype not created.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
						}
					}

//				if (MeaTwoStageOptions.sConstructInt == true) {
//					graph.sea.predint <- function(data, respvar, env, result) {
//						String predIntPlotsMea2SFunc = "diagPlotsMea2S <- tryCatch(graph.mea2s.diagplots(dataMeaTwoStage, " + respvarVector + ", is.random = TRUE, meaTwo2), error=function(err) \"notRun\")";
//						System.out.println("diagPlotsMea2SFunc: " + diagPlotsMea2SFunc);
//						rEngine.eval(diagPlotsMea2SFunc);
//						
//						String runSuccessDiagPlotsMea2S = rEngine.eval("diagPlotsMea2S").asString();
//						System.out.println("runSuccessDiagPlotsMea2S: " + runSuccessDiagPlotsMea2S);
//						//generate warning if error occurred	
//						if (runSuccessDiagPlotsMea2S != null && runSuccessDiagPlotsMea2S.equals("notRun")) {	
//							System.out.println("error");
//							rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Diagnostic plots for random genotype not created.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
//						}
////						else {
////						}
//				}

//					if (MeaTwoStageOptions.sConstructInt == true) {
//	//					graph.sea.predint <- function(data, respvar, env, result) 
//						String predIntPlotsMea2SFunc = "predIntPlotsMea2S <- tryCatch(graph.mea2s.predint(dataMeaTwoStage, " + respvarVector + ", geno = \"" + genotype + "\", meaTwo2), error=function(err) \"notRun\")";
//						System.out.println(predIntPlotsMea2SFunc);
//						rEngine.eval(predIntPlotsMea2SFunc);
//						
//						String runSuccesspredIntPlotsMea2S = rEngine.eval("predIntPlotsMea2S").asString();
//						System.out.println("runSuccesspredIntPlotsMea2S: " + runSuccesspredIntPlotsMea2S);
//						//generate warning if error occurred	
//						if (runSuccesspredIntPlotsMea2S != null && runSuccesspredIntPlotsMea2S.equals("notRun")) {	
//							System.out.println("error");
//							rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Prediction interval plots not created.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
//						}
//	//					else {
//	//					}
//					}
				
				} //end of else for if runSuccess
			} // end of if random

			//default output: save residuals to a file
			 String funcResidFixed = null;
			 String funcResidRandom = null;
			 if (weightOption == "none"){
				funcResidFixed = "mea2sr_f <- GETwoStage_resid(meaTwo1,is.genoRandom = FALSE, \"" + genotype + "\",\"" + environment + "\",is.single.out = TRUE, " + respvarVector + ", stderr = NULL, " + residualVariancesVector + ", " + numberOfRepsVector + ")";	
				funcResidRandom = "mea2sr_r <- GETwoStage_resid(meaTwo2,is.genoRandom = TRUE, \"" + genotype + "\",\"" + environment + "\", is.single.out = TRUE, " + respvarVector + ",stderr = NULL," + residualVariancesVector + ", " + numberOfRepsVector + ")";
			 }	else {
				funcResidFixed = "mea2sr_f <- GETwoStage_resid(meaTwo1,is.genoRandom = FALSE, \"" + genotype + "\",\"" + environment + "\",is.single.out = TRUE, " + respvarVector + ", " + standardErrorsVector + ", " + residualVariancesVector + ", " + numberOfRepsVector + ")";
				funcResidRandom = "mea2sr_r <- GETwoStage_resid(meaTwo2,is.genoRandom = TRUE, \"" + genotype + "\",\"" + environment + "\", is.single.out = TRUE, " + respvarVector + ", " + standardErrorsVector + ", " + residualVariancesVector + ", " + numberOfRepsVector + ")";
			 }

			 if ((genotypeFixed) & (genotypeRandom == false)) {
					String funcMergeDataResid = "data_resid <- merge(dataMeaTwoStage,mea2sr_f,by=c(\"" + environment + "\", \"" + genotype + "\"))";
				 	String func1SaveResidualsCsv = "saveResid <- tryCatch(write.table(data_resid,file =\"" + resultFolderPath + "residuals.csv\",sep=\",\",row.names=FALSE), error=function(err) \"notRun\")";
					rEngine.eval(funcResidFixed);
					rEngine.eval(funcMergeDataResid);
					rEngine.eval(func1SaveResidualsCsv);
			 }
			  else if ((genotypeFixed == false) & (genotypeRandom)) {
				  	String funcMergeDataResid = "data_resid <- merge(dataMeaTwoStage,mea2sr_r,by=c(\"" + environment + "\", \"" + genotype + "\"))";
				  	String func2SaveResidualsCsv = "saveResid <- tryCatch(write.table(data_resid,file =\"" + resultFolderPath + "residuals.csv\",sep=\",\",row.names=FALSE), error=function(err) \"notRun\")";
					rEngine.eval(funcResidRandom);
					rEngine.eval(funcMergeDataResid);
					rEngine.eval(func2SaveResidualsCsv);
			  }
			  else if ((genotypeFixed) & (genotypeRandom)) {
				  	String funcResidRandom2 = null;
					if (weightOption == "none"){funcResidRandom2 = "mea2sr_r2 <- GETwoStage_resid(meaTwo2,is.genoRandom = TRUE, \"" + genotype + "\",\"" + environment + "\", is.single.out = FALSE, " + respvarVector + ",stderr = NULL," + residualVariancesVector + ", " + numberOfRepsVector + ")";}
					else {funcResidRandom2 = "mea2sr_r2 <- GETwoStage_resid(meaTwo2,is.genoRandom = TRUE, \"" + genotype + "\",\"" + environment + "\", is.single.out = FALSE, " + respvarVector + ", " + standardErrorsVector + ", " + residualVariancesVector + ", " + numberOfRepsVector + ")";	}
					String funcResidAll = "mea2sr_All <- merge(mea2sr_f,mea2sr_r2,by=c(\"" + environment + "\", \"" + genotype + "\"))";
					String funcMergeDataResid = "data_resid <- merge(dataMeaTwoStage,mea2sr_All,by=c(\"" + environment + "\", \"" + genotype + "\"))";
				  	String funcSaveResidualsCsv = "saveResid <- tryCatch(write.table(data_resid,file =\"" + resultFolderPath + "residuals.csv\",sep=\",\",row.names=FALSE), error=function(err) \"notRun\")";
				  	rEngine.eval(funcResidFixed);
					rEngine.eval(funcResidRandom2);
					rEngine.eval(funcResidAll);
					rEngine.eval(funcMergeDataResid);
					rEngine.eval(funcSaveResidualsCsv);
			 }
			 
			String runSuccessSaveResid = rEngine.eval("saveResid").asString();
			if (runSuccessSaveResid != null && runSuccessSaveResid.equals("notRun")) {	
				System.out.println("error");
				rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Residuals not saved.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
			}

			//optional output: boxplot and histogram
			String withBox = "FALSE";
			if (boxplotRawData) withBox = "TRUE";
			String withHist = "FALSE";
			if (histogramRawData) withHist = "TRUE";
			String meaOut = "meaTwo1";
			if (genotypeFixed) meaOut = "meaTwo1";
			else if (genotypeRandom) meaOut = "meaTwo2";

			String boxHistMea2SFunc = "boxHistMea2S <- tryCatch(graph.mea2s.boxhist(dataMeaTwoStage, " + respvarVector + ", " + meaOut + ", box = \"" + withBox + "\", hist = \"" + withHist + "\"), error=function(err) \"notRun\")";
			System.out.println(boxHistMea2SFunc);
			rEngine.eval(boxHistMea2SFunc);
				
			String runSuccessBoxHistMea2S = rEngine.eval("boxHistMea2S").asString();
			if (runSuccessBoxHistMea2S != null && runSuccessBoxHistMea2S.equals("notRun")) {	
				System.out.println("error");
				rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Boxplot(s) and histogram(s) not created.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
			}
			
			rEngine.eval(outSpace);
			rEngine.eval(sep2);
			
			rEngineEnd();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	@Override
	public void doMultiEnvironmentSecondStageVersion2(String dataFileName, String outFileName, String resultFolderPath, String[] respvar, String environment, String[] environmentLevels, String genotype, String[] mseValue, String[] repValue) {
		
//		String respvarVector= inputTransform.createRVector(respvar);
		
		try {
			String readData = "dataMeaTwoStage <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
			System.out.println(readData);
			rEngine.eval(readData);
			
			String runSuccessData = rEngine.eval("dataMeaTwoStage").asString();
			
			if (runSuccessData != null && runSuccessData.equals("notRun")) {	
				System.out.println("error");
				rEngine.eval("capture.output(cat(\"\n***Error reading data.***\n\"),file=\"" + outFileName + "\",append = FALSE)"); //append to output file?
			}
			else {
				String setWd = "setwd(\"" + resultFolderPath + "\")";
				System.out.println(setWd);
				rEngine.eval(setWd);
			}
			
			String usedData = "capture.output(cat(\"\nDATA FILE: " + dataFileName + "\n\",file=\"" + outFileName + "\"))";
			String outFile = "capture.output(cat(\"\nMULTI-ENVIRONMENT ANALYSIS (TWO-STAGE)\n\"),file=\"" + outFileName + "\", append = TRUE)";
			String sep = "capture.output(cat(\"------------------------------\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String sep2 = "capture.output(cat(\"==============================\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String outSpace = "capture.output(cat(\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
			rEngine.eval(usedData);
			rEngine.eval(outFile);
			rEngine.eval(outSpace);
			
			String fixedHead = "capture.output(cat(\"GENOTYPE AS: Fixed\n\"),file=\""+ outFileName + "\",append = TRUE)";
			rEngine.eval(sep2);
			rEngine.eval(fixedHead);
			rEngine.eval(sep2);
			rEngine.eval(outSpace);

			
			// OUTPUT
			// Genotype Fixed
			for (int k = 0; k < respvar.length; k++) {
				
				String respVarHead = "capture.output(cat(\"RESPONSE VARIABLE: " + respvar[k] + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
				rEngine.eval(sep);
				rEngine.eval(respVarHead);
				rEngine.eval(sep);
					
				//default output if the number of environment levels is at least 5: Stability Analysis using Regression
				if (environmentLevels.length > 4) {
					String funcStability1 = "funcStability1 <- try(stability.analysis(dataMeaTwoStage, \"" + respvar[k] + "\", \"" + genotype + "\", \"" + environment + "\", method = \"regression\"), silent=TRUE)";
					String outTestStability1 = "capture.output(cat(\"\nSTABILITY ANALYSIS USING FINLAY-WILKINSON MODEL:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestStability1b = "capture.output(funcStability1[[1]][[1]]$stability,file=\"" + outFileName + "\",append = TRUE)";
											
					rEngine.eval(funcStability1);
					rEngine.eval(outTestStability1);
					System.out.println(funcStability1);
					
					String runSuccessStab = rEngine.eval("class(funcStability1)").asString();
					if (runSuccessStab != null && runSuccessStab.equals("try-error")) {	
						System.out.println("stability reg: error");
						String checkError = "msg <- trim.strings(strsplit(funcStability1, \":\")[[1]])";
						String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
						String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
						String checkError4 = "capture.output(cat(\"*** \nERROR in stability.analysis function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(checkError);
						rEngine.eval(checkError2);
						rEngine.eval(checkError3);
						rEngine.eval(checkError4);
					}
					else {
						rEngine.eval(outTestStability1b);
						rEngine.eval(outSpace);
					}
				} else {
					String outRemark = "capture.output(cat(\"\nSTABILITY ANALYSIS USING FINLAY-WILKINSON MODEL:\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outRemark2 = "capture.output(cat(\"***This is not done. The environment factor should have at least five levels.***\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					
					rEngine.eval(outRemark);
					rEngine.eval(outRemark2);
				}
				
				//default output if the number of environment levels is at least 5: Stability Analysis using Shukla 
				if (environmentLevels.length > 4) {
					String funcStability2 = "funcStability2 <- try(stability.analysis(dataMeaTwoStage, \"" + respvar[k] + "\", \"" + genotype + "\", \"" + environment + "\", method = \"shukla\"), silent=TRUE)";
					String outTestStability2 = "capture.output(cat(\"\nSTABILITY ANALYSIS USING SHUKLA'S MODEL:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outTestStability2b = "capture.output(funcStability2[[1]][[1]]$stability,file=\"" + outFileName + "\",append = TRUE)";
					
					System.out.println(funcStability2);
					rEngine.eval(funcStability2);
					rEngine.eval(outTestStability2);
					
					String runSuccessStab = rEngine.eval("class(funcStability2)").asString();
					if (runSuccessStab != null && runSuccessStab.equals("try-error")) {	
						System.out.println("stability shukla: error");
						String checkError = "msg <- trim.strings(strsplit(funcStability2, \":\")[[1]])";
						String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
						String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
						String checkError4 = "capture.output(cat(\"*** \nERROR in stability.analysis function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(checkError);
						rEngine.eval(checkError2);
						rEngine.eval(checkError3);
						rEngine.eval(checkError4);
					}
					else {
						rEngine.eval(outTestStability2b);
						rEngine.eval(outSpace);
					}
				} else {
					String outRemark = "capture.output(cat(\"\nSTABILITY ANALYSIS USING SHUKLA'S MODEL:\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outRemark2 = "capture.output(cat(\"***This is not done. The environment factor should have at least five levels.***\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					
					rEngine.eval(outRemark);
					rEngine.eval(outRemark2);
				}
				
				//default output if the number of environment levels is at least 3: AMMI Biplot
				if (environmentLevels.length > 2) {
					String ammiOut = "ammiOut <- try(ammi.analysis(dataMeaTwoStage[,match(\""+ environment +"\", names(dataMeaTwoStage))], dataMeaTwoStage[,match(\"" + genotype + "\", names(dataMeaTwoStage))], " + repValue[k] + ", dataMeaTwoStage[,match(\"" + respvar[k] + "\", names(dataMeaTwoStage))], " + mseValue[k] + ", number = FALSE, graph = \"biplot\", yVar = \"" + respvar[k] +"\"), silent=TRUE)"; 
					String outAmmi1 = "capture.output(cat(\"\nAMMI ANALYSIS:\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outAmmi2 = "capture.output(cat(\"Percentage of Total Variation Accounted for by the Principal Components: \n\n\"),file=\"" + outFileName + "\",append = TRUE)";;
					rEngine.eval(ammiOut);
					rEngine.eval(outAmmi1);
					System.out.println(ammiOut);
					
					String runSuccessAmmi = rEngine.eval("class(ammiOut)").asString();
					if (runSuccessAmmi != null && runSuccessAmmi.equals("try-error")) {	
						System.out.println("ammi: error");
						String checkError = "msg <- trim.strings(strsplit(ammiOut, \":\")[[1]])";
						String checkError2 = "msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))";
						String checkError3 ="msg <- gsub(\"\\\"\", \"\", msg)";
						String checkError4 = "capture.output(cat(\"*** \nERROR in ammi.analysis function:\\n  \",msg, \"\n***\n\n\", sep = \"\"), file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(checkError);
						rEngine.eval(checkError2);
						rEngine.eval(checkError3);
						rEngine.eval(checkError4);
					} else {
						String outAmmi3 = "capture.output(ammiOut$analysis,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(outAmmi2);
						rEngine.eval(outAmmi3);
						rEngine.eval(outSpace);
						rEngine.eval(outSpace);
						rEngine.eval(outSpace);
					}
				} else {
					String outRemark = "capture.output(cat(\"\nAMMI ANALYSIS:\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String outRemark2 = "capture.output(cat(\"***This is not done. The environment factor should have at least three levels.***\n\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					
					rEngine.eval(outRemark);
					rEngine.eval(outRemark2);
				}
				
			}//end of for loop for respvars 
			
			rEngine.eval(outSpace);
			rEngine.eval(sep2);
			
			rEngineEnd();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	
	@Override
	public void doSelectionIndex(String dataFileName, String outFileName, String resultFolderPath, int selectionIndex, int designIndex, boolean basisCorrelation, String weightsFileName, String markersFileName,
			String qtlFileName, int percentSelected) {
		try {

			String selectionIndexUsed = new String();
			switch (selectionIndex) {
				case 0: selectionIndexUsed = "Smith Selection Index"; break;
				case 1: selectionIndexUsed = "Eigen Selection Index Method (ESIM)"; break;
				case 2: selectionIndexUsed = "Restrictive Kempthorne and Nordskog Selection Index"; break;
				case 3: selectionIndexUsed = "Restrictive Eigen Selection Index Method"; break;
				case 4: selectionIndexUsed = "Lande and Thompson Selection Index"; break;
				case 5: selectionIndexUsed = "Molecular Eigen Selection Index Method"; break;
				default: selectionIndexUsed = "Smith Selection Index"; break;
			}
			
			String designUsed = new String();
			String design = new String();
			switch (designIndex) {
				case 0: {
					design = "lattice";
					designUsed = "Lattice"; 
					break;
				}
				case 1: {
					design = "rcb";
					designUsed = "Randomized Complete Block (RCB)"; 
					break;
				}
			}
			
			String basisSI = null;
			if (basisCorrelation) basisSI = "TRUE";
			else basisSI = "FALSE";
			
			String setWd = "setwd(\"" + resultFolderPath + "\")";
			String usedData = "capture.output(cat(\"\nDATA FILE: " + dataFileName + "\n\",file=\"" + outFileName + "\"))";

			String usedSelInd = "capture.output(cat(\"\n" + selectionIndexUsed + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String usedDesign = "capture.output(cat(\"\nDESIGN: " + designUsed + "\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String sep = "capture.output(cat(\"------------------------------\n\"),file=\"" + outFileName + "\",append = TRUE)";

			rEngine.eval(setWd);
			rEngine.eval(usedData);
			rEngine.eval(usedSelInd);
			rEngine.eval(usedDesign);
			
			System.out.println(setWd);

			// OUTPUT
			String funcSelInd = null;
			switch (selectionIndex) {
			case 0: {
				funcSelInd = "index <- tryCatch(SmithIndex_2(\"" + dataFileName + "\", \"" + weightsFileName + "\", " + percentSelected + ", \"" + design + "\", corr = " + basisSI + ", rawdata = TRUE), error=function(err) \"notRun\")";
				break;
			}
			case 1: {
				funcSelInd = "index <- tryCatch(ESIMIndex_2(\"" + dataFileName + "\", \"" + weightsFileName + "\", " + percentSelected + ", \"" + design + "\", corr = " + basisSI + ", rawdata = TRUE), error=function(err) \"notRun\")";
				break;
			}
			case 2: {
				funcSelInd = "index <- tryCatch(KNIndex_2(\"" + dataFileName + "\", \"" + weightsFileName + "\", " + percentSelected + ", \"" + design + "\", corr = " + basisSI + ", rawdata = TRUE), error=function(err) \"notRun\")";
				break;
				
			}
			case 3: {
				funcSelInd = "index <- tryCatch(RESIMIndex_2(\"" + dataFileName + "\", \"" + weightsFileName + "\", " + percentSelected + ", \"" + design + "\", corr = " + basisSI + ", rawdata = TRUE), error=function(err) \"notRun\")";
				break;
			}	
			case 4: {
				funcSelInd = "index <- tryCatch(LTIndex_2(\"" + dataFileName + "\", \"" + weightsFileName + "\", " + percentSelected + ", \"" + design + "\", corr = " + basisSI + ", rawdata = TRUE, \"" + markersFileName + "\", \"" + qtlFileName + "\"), error=function(err) \"notRun\")";			
				break;
			}
			case 5: {
				funcSelInd = "index <- tryCatch(MESIMIndex_2(\"" + dataFileName + "\", \"" + weightsFileName + "\", " + percentSelected + ", \"" + design + "\", corr = " + basisSI + ", rawdata = TRUE, \"" + markersFileName + "\", \"" + qtlFileName + "\"), error=function(err) \"notRun\")";
				break;
			}
			}

			rEngine.eval(funcSelInd);
			System.out.println(funcSelInd);

			String runSuccessSelInd = rEngine.eval("index").asString();
			if (runSuccessSelInd != null && runSuccessSelInd.equals("notRun")) {	
				System.out.println("error");
				rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Selection index not computed.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
			}
			else {
			
				//all output
	
				String matrixName = "COVARIANCE";
				if (basisCorrelation) matrixName = "CORRELATION";
	
				//geno cov/corr matrix
				String genoMatrix = "capture.output(cat(\"\nGENETIC " + matrixName + " MATRIX\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
				String genoMatrix2 = "capture.output(index$MVGeno,file=\"" + outFileName + "\",append = TRUE)";
				
				rEngine.eval(genoMatrix);
				rEngine.eval(genoMatrix2);
				
				//pheno cov/corr matrix
				String phenoMatrix = "capture.output(cat(\"\n\nPHENOTYPIC " + matrixName + " MATRIX\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
				String phenoMatrix2 = "capture.output(index$MVPheno,file=\"" + outFileName + "\",append = TRUE)";
				
				rEngine.eval(phenoMatrix);
				rEngine.eval(phenoMatrix2);
				
				//molecular cov matrix
				if (selectionIndex == 4 | selectionIndex == 5) {
					String moleCovMatrix = "capture.output(cat(\"\n\nMOLECULAR COVARIANCE MATRIX\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
					String moleCovMatrix2 = "capture.output(index$MVMole,file=\"" + outFileName + "\",append = TRUE)";
					
					rEngine.eval(moleCovMatrix);
					rEngine.eval(moleCovMatrix2);
				}
				
				//CovIndBv
				String covIndBv = "capture.output(cat(\"\n\nCOVARIANCE BETWEEN SELECTION INDEX AND BREEDING VALUE: \",index$CovIndBV[[1]]),file=\"" + outFileName + "\",append = TRUE)";
				rEngine.eval(covIndBv);
	
	
				//VarInd
				String varInd = "capture.output(cat(\"\n\nVARIANCE OF THE SELECTION INDEX: \", index$VarInd[[1]]),file=\"" + outFileName + "\",append = TRUE)";
				rEngine.eval(varInd);
	
				//VarBv
				String varBv = "capture.output(cat(\"\n\nVARIANCE OF THE BREEDING VALUE: \", index$VarBV[[1]]),file=\"" + outFileName + "\",append = TRUE)";
				rEngine.eval(varBv);
				
				//CorrIndBv
				String corrIndBv = "capture.output(cat(\"\n\nCORRELATION BETWEEN SELECTION INDEX AND BREEDING VALUE: \", index$CorrIndBV[[1]]),file=\"" + outFileName + "\",append = TRUE)";
				rEngine.eval(corrIndBv);
	
				//selGen
				String selGenMatrix = "capture.output(cat(\"\n\nVALUES OF THE TRAITS, SELECTION INDEX, MEANS, GAINS FOR THE " + percentSelected + "% SELECTED INDIVIDUALS\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
				String selGenMatrix2 = "capture.output(index$SelGen,file=\"" + outFileName + "\",append = TRUE)";
				
				rEngine.eval(selGenMatrix);
				rEngine.eval(selGenMatrix2);
	
				//allGen
				String allGenMatrix = "capture.output(cat(\"\n\nVALUES OF THE TRAITS AND THE SELECTION INDEX FOR ALL INDIVIDUALS\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
				String allGenMatrix2 = "capture.output(index$AllGen,file=\"" + outFileName + "\",append = TRUE)";
				
				rEngine.eval(allGenMatrix);
				rEngine.eval(allGenMatrix2);
				rEngine.eval(sep);
				
				String funcSaveToCsv = "savePctSel <- tryCatch(write.csv(index$SelGen,file =\"" + resultFolderPath + "selectedGenotypes.csv\",row.names=T), error=function(err) \"notRun\")";
				rEngine.eval(funcSaveToCsv);
				
				String runSuccessSavePctSel = rEngine.eval("savePctSel").asString();
				if (runSuccessSavePctSel != null && runSuccessSavePctSel.equals("notRun")) {	
					System.out.println("error");
					rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Percentage selected not saved.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
				}

			}
			rEngineEnd();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void doQtl(String dataFileName, boolean isInputRawData, String outFileName, String resultFolderPath, String genotypicDataFileName, String mapFileName, int designIndex, String[] respvar, 
			String block, String rep, String row, String column, String genotype, String environment, String[] environmentLevels, String selectedEnvironmentLevel, 
			boolean heterozygousPresent, String crossType, String step, String windowSize, String minDistance, String qtlMethod, boolean thresholdLiJi, String thresholdNumericValue, 
			boolean estimatePlotMarkerMap, double allelicDiffThreshold, double cutOffMissingData, double significanceLevelChiSquare) {
		
		String respvarVector= inputTransform.createRVector(respvar);
		String [] respVarMean = new String[respvar.length];
		
		try {

			String dire3 = null;
			String environment_In = null;
			if (environment != "NULL") {
				environment_In = "\"" + environment + "\"";
			} else environment_In = "NULL";
			
			String[] envts = null;
			if (environmentLevels != null) {
				if (environmentLevels.length > 0) {
					envts = environmentLevels;
				} else { 
					envts = new String[1];
					envts[0] = "1"; 
				}
			}
			
			String specEnv = "NULL";
			int numEnvts = 1;
			if (environment != "NULL") {
				if (selectedEnvironmentLevel.equals("[ALL]")) numEnvts = envts.length;
			} else {
				numEnvts = 1;
			}
			
			//if input is raw data
			String designUsed = new String();
			String design = new String();
			if (isInputRawData) {
				String readData = "data <- tryCatch(read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\"), error=function(err) \"notRun\")";
				System.out.println(readData);
				rEngine.eval(readData);
				
				if (!selectedEnvironmentLevel.equals("[ALL]")) {
					String dire2 = "data<-tryCatch(data[which(data[match(\"" + environment + "\", names(data))] == \"" + selectedEnvironmentLevel + "\"),], error=function(err) \"notRun\")";
					System.out.println(dire2);
					rEngine.eval(dire2);
				}
				
				switch (designIndex) {
					case 0: {
						designUsed = "Randomized Complete Block (RCB)";
						design = "RCB";
						break;
					}
					case 1: {
						designUsed = "Augmented RCB"; 
						design = "AugRCB";
						break;
					}
					case 2: {
						designUsed = "Augmented Latin Square"; 
						design = "AugLS";
						break;
					}
					case 3: {
						designUsed = "Alpha-Lattice"; 
						design = "Alpha";
						break;
					}
					case 4: {
						designUsed = "Row-Column"; 
						design = "RowCol";
						break;
					}
					default: {
						designUsed = "Randomized Complete Block (RCB)"; 
						design = "RCB";
						break;
					}
				}

				String runSuccessData = rEngine.eval("data").asString();
				if (runSuccessData != null && runSuccessData.equals("notRun")) {	
					System.out.println("error");
					rEngine.eval("capture.output(cat(\"\n***Error reading data.***\n\"),file=\"" + outFileName + "\",append = FALSE)"); //append to output file?
				}
				
				String funcSeaFixed = null;
				String groupVars = null;
				if (design == "RCB" || design == "AugRCB"){
					funcSeaFixed = "ssa1 <- tryCatch(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column=NULL, rep=NULL, env = " + environment_In+ ", is.random = FALSE), error=function(err) \"notRun\")";
					groupVars = "c(\"" + genotype + "\", \"" + block + "\")";
				} else if (design == "AugLS") {
					funcSeaFixed = "ssa1 <- tryCatch(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + row+ "\",\"" + column + "\", rep=NULL, env = " + environment_In+ ", is.random = FALSE), error=function(err) \"notRun\")";
					groupVars = "c(\"" + genotype + "\", \"" + row + "\", \"" + column + "\")";
				} else if (design == "Alpha") {
					funcSeaFixed = "ssa1 <- tryCatch(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + block+ "\",column=NULL,\"" + rep + "\", env = " + environment_In+ ", is.random = FALSE), error=function(err) \"notRun\")";
					groupVars = "c(\"" + genotype + "\", \"" + block + "\", \"" + rep + "\")";
				} else if (design == "RowCol") {
					funcSeaFixed = "ssa1 <- tryCatch(ssa.test(\"" + design + "\",data,"+ respvarVector + ",\"" + genotype + "\",\"" + row+ "\",\"" + column + "\",\"" + rep + "\", env = " + environment_In+ ", is.random = FALSE), error=function(err) \"notRun\")";
					groupVars = "c(\"" + genotype + "\", \"" + rep + "\", \"" + row + "\", \"" + column + "\")";
				}

				rEngine.eval(funcSeaFixed);
				System.out.println(funcSeaFixed);
				
				String runSuccessSsa1 = rEngine.eval("ssa1").asString(); 
				if (runSuccessSsa1 != null && runSuccessSsa1.equals("notRun")) 	
					System.out.println("error");
				
				dire3 = "dataMeans<-tryCatch(ssa1$meansse, error=function(err) \"notRun\")";
				rEngine.eval(dire3);
				System.out.println(dire3);
				
				String runSuccessDire3 = rEngine.eval("dataMeans").asString(); 
				if (runSuccessDire3 != null && runSuccessDire3.equals("notRun")) 	
					System.out.println("error with dire3");
				
				for (int i = 0; i < respvar.length; i++) {
					respVarMean[i] = respvar[i]+ "_Mean";
				}
				
				//display results of SSA when input data is raw data
				String usedData = "capture.output(cat(\"\nDATA FILE: " + dataFileName + "\n\",file=\"" + outFileName + "\"))";
				String outFile = "capture.output(cat(\"\nSINGLE-ENVIRONMENT ANALYSIS\n\"),file=\"" + outFileName + "\",append = TRUE)";
				String usedDesign = "capture.output(cat(\"\nDESIGN: " + designUsed + "\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
				String sep = "capture.output(cat(\"------------------------------\"),file=\"" + outFileName + "\",append = TRUE)";
				String sep2 = "capture.output(cat(\"==============================\n\"),file=\"" + outFileName + "\",append = TRUE)";
				String outspace = "capture.output(cat(\"\n\"),file=\"" + outFileName + "\",append = TRUE)"; 
				
				rEngine.eval(usedData);
				rEngine.eval(outFile);
				rEngine.eval(usedDesign);
				
				for (int k = 0; k < respvar.length; k++) {
					int i = k + 1; // 1-relative index;
					String respVarHead = "capture.output(cat(\"\nRESPONSE VARIABLE: " + respvar[k] + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
					rEngine.eval(sep);
					rEngine.eval(respVarHead);
					rEngine.eval(sep);
					
					//default output: descriptive statistics			
					String funcDesc = "outDesc <- tryCatch(DescriptiveStatistics(data, \"" + respvar[k] + "\", \"" + environment + "\"), error=function(err) \"notRun\")";
					System.out.println(funcDesc);
					rEngine.eval(funcDesc);
					
					String outDescStat = "capture.output(cat(\"\nDescriptive Statistics:\n\n\"),file=\"" + outFileName + "\",append = TRUE)"; 
					String outDescStat2 = "capture.output(outDesc,file=\"" + outFileName + "\",append = TRUE)";
					
					String runSuccessDescStat = rEngine.eval("outDesc").asString();	
					if (runSuccessDescStat != null && runSuccessDescStat.equals("notRun")) {	
						System.out.println("error");
						rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Descriptive statistics can't be displayed.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
					} 
					else {
						rEngine.eval(outspace);
						rEngine.eval(outDescStat);
						rEngine.eval(outDescStat2);
						rEngine.eval(outspace);
					}

					for (int m = 0; m < numEnvts; m++) { // no of envts or sites
						int j = m + 1; // 1-relative index;
						String envtHead = "capture.output(cat(\"\nANALYSIS FOR: "+ environment + "\", \" = \" ,ssa1$output[[" + i	+ "]]$site[[" + j + "]]$env,\"\n\"),file=\""+ outFileName + "\",append = TRUE)";
						rEngine.eval(outspace);
						rEngine.eval(sep);
						rEngine.eval(envtHead);
						rEngine.eval(sep);
						
						// default output: trial summary
						String funcTrialSum = "funcTrialSum <- tryCatch(class.information(" + groupVars + ",ssa1$output[[" + i + "]]$site[[" + j + "]]$data), error=function(err) \"notRun\")";
						String trialSumHead = "capture.output(cat(\"\n\n\nTrial Summary:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsRead = "capture.output(cat(\"Number of observations read: \", ssa1$output[["	+ i	+ "]]$site[[" + j + "]]$obsread[[1]],\"\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String trialObsUsed = "capture.output(cat(\"Number of observations used: \", ssa1$output[["	+ i	+ "]]$site[[" + j + "]]$obsused[[1]],\"\n\n\"),file=\""	+ outFileName + "\",append = TRUE)";
						String trialSum = "capture.output(funcTrialSum,file=\"" + outFileName + "\",append = TRUE)";

						rEngine.eval(funcTrialSum);

						String runSuccessTS = rEngine.eval("funcTrialSum").asString();
						if (runSuccessTS != null && runSuccessTS.equals("notRun")) {	
							System.out.println("error");
							rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***Trial summary can't be displayed.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
						}
						else {
							rEngine.eval(trialSumHead);
							rEngine.eval(trialObsRead);
							rEngine.eval(trialObsUsed);
							rEngine.eval(trialSum);
						}	

						//default output: variance components
						String outVarComp = "capture.output(cat(\"\n\nVariance Components Table:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outVarComp2 = "capture.output(ssa1$output[[" + i + "]]$site[[" + j + "]]$varcomp.table,file=\"" + outFileName + "\",append = TRUE)";

						rEngine.eval(outVarComp);
						rEngine.eval(outVarComp2);

						//default output: display ANOVA
						String outAnovaTable = "capture.output(cat(\"\n\"),file=\""	+ outFileName + "\",append = TRUE)";
//						String outAnovaTable2 = "capture.output(cat(\"\nTesting for the Significance of Genotypic Effect:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outAnovaTable3 = "capture.output(ssa1$output[[" + i + "]]$site[[" + j + "]]$model.comparison,file=\"" + outFileName + "\",append = TRUE)";
						String outAnovaTable4 = "capture.output(ssa1$output[[" + i + "]]$site[[" + j + "]]$anova.table,file=\"" + outFileName + "\",append = TRUE)";

						rEngine.eval(outAnovaTable);
						rEngine.eval(outAnovaTable);
						rEngine.eval(outAnovaTable3);
						rEngine.eval(outAnovaTable);
						rEngine.eval(outAnovaTable4);

						//default output: LSMeans
						String outGenoDescStat = "capture.output(cat(\"\n\nGenotype means and standard errors:\n\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String outGenoDescStat2 = "capture.output(ssa1$output[[" + i + "]]$site[[" + j + "]]$summary.statistic,file=\"" + outFileName + "\",append = TRUE)"; 

						rEngine.eval(outGenoDescStat);
						rEngine.eval(outGenoDescStat2);
						rEngine.eval(outspace);						
					} // end of for loop for diff envts
				}
				rEngine.eval(outspace);
				rEngine.eval(sep2);
			}

			//using the predicted means data
			if (isInputRawData == false) {
				dire3 = "dataMeans<- tryCatch(read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\"), error=function(err) \"notRun\")";				
				rEngine.eval(dire3);
				System.out.println(dire3);
				
				for (int i = 0; i < respvar.length; i++) {
					respVarMean[i] = respvar[i];
				}
			}
			
			//data compatibility check
			String setWd = "setwd(\"" + resultFolderPath + "\")";
			String dataPrepFunction = "dataPrepResult<-QTL.dataprep(dataMeans, \"" + genotypicDataFileName + "\", \"" + mapFileName + "\", \"" + genotype + "\")";
			
			rEngine.eval(setWd);
			rEngine.eval(dataPrepFunction);
			
			System.out.println(setWd);
			System.out.println(dataPrepFunction);
			
			String isNewPhenoCreated = rEngine.eval("dataPrepResult$isNewPhenoCreated").asBool().toString();
			String isNewMapCreated = rEngine.eval("dataPrepResult$isNewMapCreated").asBool().toString();
			String isNewGenoCreated = rEngine.eval("dataPrepResult$isNewGenoCreated").asBool().toString();
			
			System.out.println("is new phenotypic file created:" + isNewPhenoCreated);
			System.out.println("is new map file created:" + isNewMapCreated);
			System.out.println("is new genotypic file created:" + isNewGenoCreated);
			
			if (isNewPhenoCreated == "TRUE") {
				String newPheno = "dataMeans<- tryCatch(read.csv(\"" + resultFolderPath + "newPhenoData.csv\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\"), error=function(err) \"notRun\")";
				rEngine.eval(newPheno);
				System.out.println(newPheno);
			}
			
			String newMapFilePath=null;
			if (isNewMapCreated == "TRUE") {
				newMapFilePath = resultFolderPath + "newMapData.txt";
			} else {
				newMapFilePath = mapFileName;
			}
			
			String newGenoFilePath=null;
			if (isNewGenoCreated == "TRUE") {
				newGenoFilePath = resultFolderPath + "newGenoData.txt";
			} else {
				newGenoFilePath = genotypicDataFileName;
			}
			
			//start of QTL analysis
			if (isInputRawData == false) {
				String usedData = "capture.output(cat(\"\nDATA FILE: " + dataFileName + "\n\",file=\"" + outFileName + "\"))";
				rEngine.eval(usedData);
			}
			
//			String usedDesign = "capture.output(cat(\"\nDESIGN: " + designUsed + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String heading2 = "capture.output(cat(\"\nQTL ANALYSIS\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String heading3 = "capture.output(cat(\"\nMethod: " +  qtlMethod + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
			String sep = "capture.output(cat(\"------------------------------\n\"),file=\"" + outFileName + "\",append = TRUE)";
			
//			if (isInputRawData) {rEngine.eval(usedDesign); }
			rEngine.eval(heading2);
			rEngine.eval(heading3);
			
			String bHet = "FALSE";
			if (heterozygousPresent) bHet = "TRUE"; else bHet = "FALSE"; 
			String bMarker = "FALSE";
			if (estimatePlotMarkerMap) bMarker = "TRUE"; else bMarker = "FALSE";
			String sThresh;
			if (thresholdLiJi) sThresh = "Li&Ji"; else sThresh = thresholdNumericValue;

//			double dThreshMQ = allelicDiffThreshold /100.0;
//			double dChi2Sig = significanceLevelChiSquare / 100.0;
//			double dCutoff = cutOffMissingData / 100.0;
			
			double dThreshMQ = allelicDiffThreshold;
			double dChi2Sig = significanceLevelChiSquare;
			double dCutoff = cutOffMissingData;
								
			for (int i = 0; i < respvar.length; i++) {
				String qtlResultAll1 = "capture.output(cat(\"\nTRAIT: " + respvar[i] + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
				rEngine.eval(qtlResultAll1);
				
				for (int j = 0; j < numEnvts; j++) {
					if (!selectedEnvironmentLevel.equals("[ALL]")) specEnv = selectedEnvironmentLevel;
					else specEnv = envts[j];

					if (environment != "NULL") {
						String qtlResultAll1b = "capture.output(cat(\"\nENVIRONMENT: " + specEnv + "\n\"),file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(qtlResultAll1b);
					}

					String funcDmMq1 = "dmMq1 <- tryCatch(cross.data<-load.cross.data(dataMeans, \"" + newGenoFilePath +
					"\", \"" + newMapFilePath + "\", cross = \"" + crossType +
					"\", heterozygotes = " + bHet + ", genotype = \"" + genotype + "\", env.label = " + environment_In + ", env = \"" + specEnv + "\", ST = NULL), error=function(err) \"notRun\")";

					String funcDmMq2 = "dmMq2 <- tryCatch(crossobj <- cross.data, error=function(err) \"notRun\")";

					rEngine.eval(funcDmMq1);
					System.out.println(funcDmMq1);
					
					String runSuccessDmMq1 = rEngine.eval("dmMq1").asString();
					if (runSuccessDmMq1 != null && runSuccessDmMq1.equals("notRun")) {	
						System.out.println("error");
						rEngine.eval("capture.output(cat(\"\n***Problem encountered during data reading/compilation.***\n\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
					}

					rEngine.eval(funcDmMq2);
					System.out.println(funcDmMq2);
					
					String runSuccessDmMq2 = rEngine.eval("dmMq2").asString();
					if (runSuccessDmMq2 != null && runSuccessDmMq2.equals("notRun")) {	
						System.out.println("error");
						rEngine.eval("capture.output(cat(\"\n***Problem encountered during data reading/compilation.***\n\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
					}
						
					if (i == 0 && j == 0) {
						//done once for all envts and traits
						String funcDmMq3 = "dmMq3 <- tryCatch(MQ.marker.diag(crossobj, \"" + resultFolderPath + "\", estmarker = " + bMarker + ", thresholdMQ = " + dThreshMQ + ", p.val = " + dChi2Sig + ", na.cutoff = " + 
											dCutoff + "), error=function(err) \"notRun\")";

						rEngine.eval(funcDmMq3);
						System.out.println(funcDmMq3);
						
						String runSuccessDmMq3 = rEngine.eval("dmMq3").asString();
						if (runSuccessDmMq3 != null && runSuccessDmMq3.equals("notRun")) {	
							System.out.println("error");
							rEngine.eval("capture.output(cat(\"\n***Problem encountered during marker quality check.***\n\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
						}
					}
					
					String funcQtlSIM = "qtlSIM <- tryCatch(QTL.result<-QTL.analysis(crossobj, \"" + resultFolderPath + "\", env.label = " + environment_In + ", env = \"" + specEnv + "\", trait = \"" + respVarMean[i] + "\", step = " + step + 
					", method = \"SIM\", threshold = \"" + sThresh +
					"\", distance = " + minDistance + ", window.size = " + windowSize + 
		            "), error=function(err) \"notRun\")";
					
					System.out.println(funcQtlSIM);
					rEngine.eval(funcQtlSIM);
					
//					String runSuccessQtlSim = rEngine.eval("qtlSIM").asString();
//					System.out.println("runSuccessQtlSim: " + runSuccessQtlSim);
//					//generate warning if error occurred	
//					if (runSuccessQtlSim != null && runSuccessQtlSim.equals("notRun")) {	
//						System.out.println("error");
//						rEngine.eval("capture.output(cat(\"\n***An error has occurred.***\n***QTL analysis not completed.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
//					}
					
					String runSuccessQtl = null;
					
					if (qtlMethod == "SIM") {
						runSuccessQtl = rEngine.eval("qtlSIM").asString();
					}
					
					if (qtlMethod == "CIM") {
						String funcQtlCIM1 = "qtlCIM1 <- tryCatch(cofactors<-as.vector(QTL.result$selected$marker), error=function(err) \"notRun\")";

						String funcQtlCIM2 = "qtlCIM2 <- tryCatch(QTL.result<-QTL.analysis(crossobj, \"" + resultFolderPath + "\", env.label = " + environment_In + ", env = \"" + specEnv + "\", trait = \"" + respVarMean[i] + "\", step = " + step + 
						", method = \"CIM\", threshold = \"" + sThresh +
						"\", distance = " + minDistance + ", cofactors, window.size = " + windowSize + 
			            "), error=function(err) \"notRun\")";
						System.out.println(funcQtlCIM1);
						rEngine.eval(funcQtlCIM1);

						String runSuccessQtlCIM1 = rEngine.eval("qtlCIM1").asString();
						if (runSuccessQtlCIM1 != null && runSuccessQtlCIM1.equals("notRun")) {	
							System.out.println("error");
							rEngine.eval("capture.output(cat(\"\n***Cannot proceed with CIM (error on the cofactors).***\n***(Shown output for SIM).***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
						} else { //if cofactors were generated
							System.out.println(funcQtlCIM2);
							rEngine.eval(funcQtlCIM2);
							
							runSuccessQtl = rEngine.eval("qtlCIM2").asString();
						}
					}
					
					if (runSuccessQtl != null && runSuccessQtl.equals("notRun")) {	
						System.out.println("error");
						rEngine.eval("capture.output(cat(\"\n***QTL analysis not done.***\n\"),file=\"" + outFileName + "\",append = TRUE)"); //append to output file?
					}
					else {
					
						//all output
						//QTL result all
	
						
						String qtlResultAll1a = "capture.output(cat(\"\nQTL RESULT (ALL):\n\"),file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(qtlResultAll1a);	
	
						String qtlResultAll2 = "capture.output(QTL.result$all,file=\"" + outFileName + "\",append = TRUE)";
						rEngine.eval(qtlResultAll2);
						
						//QTL result selected
						String qtlResultSel1 = "capture.output(cat(\"\nQTL RESULT (SELECTED):\n\"),file=\"" + outFileName + "\",append = TRUE)";
						String qtlResultSel2 = "capture.output(QTL.result$selected,file=\"" + outFileName + "\",append = TRUE)";
						
						rEngine.eval(qtlResultSel1);
						rEngine.eval(qtlResultSel2);
	
						rEngine.eval(sep);
					
					}// end of else for r
				}
			}

			rEngineEnd();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void doGenerationMeanRawData(String dataFileName, String outFileName, String[] usersNotation, String[] generalNotation, String alpha) {

		String usersNotationVector= inputTransform.createRVector(usersNotation);
		String generalNotationVector=inputTransform.createRVector(generalNotation);

		try {
			String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
			String sinkIn = "sink(\"" + outFileName + "\")";
			String func = "result <- try(generationMean.test(dataRead, " + usersNotationVector + "," + generalNotationVector + ",\"" + alpha + "\"), silent=TRUE)";
			String checkError = "if (class(result) == \"try-error\") {\n";
			checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
			checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
			checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
			checkError = checkError + "    cat(\"\n*** \nERROR in generationMean.test function:\\n  \",msg, \"\n***\", sep = \"\")\n";
			checkError = checkError + "}";
			String sinkOut = "sink()";

			rEngine.eval(readData);
			rEngine.eval(sinkIn);
			rEngine.eval(func);
			rEngine.eval(checkError);
			rEngine.eval(sinkOut);
			
			System.out.println(readData);
			System.out.println(sinkIn);
			System.out.println(func);
			System.out.println(checkError);
			System.out.println(sinkOut);
				
			rEngineEnd();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public void doGenerationMeanSummaryStats(String dataFileName, String outFileName, String generationMean, String weights, String generationStandardDeviation, 
			String numberObservations, String generation, String[] usersNotation, String[] generalNotation, String alpha) {
		
		String usersNotationVector= inputTransform.createRVector(usersNotation);
		String generalNotationVector=inputTransform.createRVector(generalNotation);
		
		try {
			String readData = "dataRead <- read.csv(\"" + dataFileName + "\", header = TRUE, na.strings = c(\"NA\",\".\",\" \",\"\"), blank.lines.skip=TRUE, sep = \",\")";
			String sinkIn = "sink(\"" + outFileName + "\")";

			String func=null;
			if (weights != "NULL") {
				func = "result <- try(generationMeanSummaryStats.test(dataRead, \"" + generationMean + "\", \"" + weights + "\", stdDevVar=NULL, numObsVar=NULL,\"" + generation + "\"," + usersNotationVector + "," + generalNotationVector + ",\"" + alpha + "\"), silent=TRUE)";
			} else if (numberObservations != "NULL") {
					func = "result <- try(generationMeanSummaryStats.test(dataRead, \"" + generationMean + "\", weightsVar=NULL,\"" + generationStandardDeviation + "\",\"" + numberObservations + "\",\"" + generation + "\"," + usersNotationVector + "," + generalNotationVector + ",\"" + alpha + "\"), silent=TRUE)";
				} else {
					func = "result <- try(generationMeanSummaryStats.test(dataRead, \"" + generationMean + "\", weightsVar=NULL,\"" + generationStandardDeviation + "\", numObsVar=NULL,\"" + generation + "\"," + usersNotationVector + "," + generalNotationVector + ",\"" + alpha + "\"), silent=TRUE)";
				}
			String checkError = "if (class(result) == \"try-error\") {\n";
			checkError = checkError + "    msg <- trim.strings(strsplit(result, \":\")[[1]])\n";
			checkError = checkError + "    msg <- trim.strings(paste(strsplit(msg, \"\\n\")[[length(msg)]], collapse = \" \"))\n";
			checkError = checkError + "    msg <- gsub(\"\\\"\", \"\", msg)\n";
			checkError = checkError + "    cat(\"\n*** \nERROR in generationMeanSummaryStats.test function:\\n  \",msg, \"\n***\", sep = \"\")\n";
			checkError = checkError + "}";
			String sinkOut = "sink()";

			rEngine.eval(readData);
			rEngine.eval(sinkIn);
			rEngine.eval(func);
			rEngine.eval(checkError);
			rEngine.eval(sinkOut);
			
			System.out.println(readData);
			System.out.println(sinkIn);
			System.out.println(func);
			System.out.println(checkError);
			System.out.println(sinkOut);
				
			rEngineEnd();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}

